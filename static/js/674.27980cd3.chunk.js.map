{"version":3,"file":"static/js/674.27980cd3.chunk.js","mappings":"wbAqBMA,EAAS,IAAIC,EAAAA,EAAO,gCAE1B,aAIC,WAAYC,QAAA,IAAAA,IAAAA,EAAAA,IACXC,KAAKC,QAAUF,EA8BjB,OA3BCG,EAAAA,UAAAA,UAAAA,SAAUC,GAKT,YALS,IAAAA,IAAAA,EAAAA,IACTH,KAAKC,QAAOG,EAAAA,EAAAA,GAAQJ,KAAKC,SAAYE,GAErCN,EAAOQ,MAAM,aAAaL,KAAKM,kBAAqBN,KAAKC,SAElDD,KAAKD,SAGbG,EAAAA,UAAAA,YAAAA,WACC,MAAO,gBAKRK,OAAAA,eAAcL,EAAAA,UAAA,UAAO,C,IAArB,WACC,YAAYF,KAAKC,U,gCAYnB,EAnCA,GCPIO,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBD,OAAOI,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUJ,EAAGC,GAAKD,EAAEG,UAAYF,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAII,KAAKJ,EAAOH,OAAOQ,UAAUC,eAAeC,KAAKP,EAAGI,KAAIL,EAAEK,GAAKJ,EAAEI,KACzFN,EAAcC,EAAGC,IAGrB,SAASQ,EAAUT,EAAGC,GACzB,GAAiB,oBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOrB,KAAKsB,YAAcb,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaH,OAAOgB,OAAOb,IAAMW,EAAGN,UAAYL,EAAEK,UAAW,IAAIM,GAG5E,IAAIjB,EAAW,WAQlB,OAPAA,EAAWG,OAAOiB,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIb,KADTY,EAAIG,UAAUF,GACOpB,OAAOQ,UAAUC,eAAeC,KAAKS,EAAGZ,KAAIW,EAAEX,GAAKY,EAAEZ,IAE9E,OAAOW,GAEJrB,EAAS2B,MAAM/B,KAAM6B,YA8BzB,SAASG,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAS,MAAUK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,OAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUL,MAAME,EAASC,GAAc,KAAKS,WAI/D,SAASM,EAAYhB,EAASiB,GACjC,IAAsGC,EAAGC,EAAG3B,EAAG4B,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAP/B,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOgC,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEV,KAAMgB,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,oBAAXC,SAA0BP,EAAEO,OAAOC,UAAY,WAAa,OAAO7D,OAAUqD,EACvJ,SAASM,EAAK/B,GAAK,OAAO,SAAUkC,GAAK,OACzC,SAAcC,GACV,GAAIZ,EAAG,MAAM,IAAIhC,UAAU,mCAC3B,KAAOmC,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAM3B,EAAY,EAARsC,EAAG,GAASX,EAAC,OAAaW,EAAG,GAAKX,EAAC,SAAe3B,EAAI2B,EAAC,SAAe3B,EAAER,KAAKmC,GAAI,GAAKA,EAAET,SAAWlB,EAAIA,EAAER,KAAKmC,EAAGW,EAAG,KAAKhB,KAAM,OAAOtB,EAE3J,OADI2B,EAAI,EAAG3B,IAAGsC,EAAK,CAAS,EAARA,EAAG,GAAQtC,EAAEgB,QACzBsB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGtC,EAAIsC,EAAI,MACxB,KAAK,EAAc,OAAXT,EAAEC,QAAgB,CAAEd,MAAOsB,EAAG,GAAIhB,MAAM,GAChD,KAAK,EAAGO,EAAEC,QAASH,EAAIW,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKT,EAAEI,IAAIM,MAAOV,EAAEG,KAAKO,MAAO,SACxC,QACI,KAAkBvC,GAAZA,EAAI6B,EAAEG,MAAY3B,OAAS,GAAKL,EAAEA,EAAEK,OAAS,MAAkB,IAAViC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAET,EAAI,EAAG,SACjG,GAAc,IAAVS,EAAG,MAActC,GAAMsC,EAAG,GAAKtC,EAAE,IAAMsC,EAAG,GAAKtC,EAAE,IAAM,CAAE6B,EAAEC,MAAQQ,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYT,EAAEC,MAAQ9B,EAAE,GAAI,CAAE6B,EAAEC,MAAQ9B,EAAE,GAAIA,EAAIsC,EAAI,MAC7D,GAAItC,GAAK6B,EAAEC,MAAQ9B,EAAE,GAAI,CAAE6B,EAAEC,MAAQ9B,EAAE,GAAI6B,EAAEI,IAAIO,KAAKF,GAAK,MACvDtC,EAAE,IAAI6B,EAAEI,IAAIM,MAChBV,EAAEG,KAAKO,MAAO,SAEtBD,EAAKb,EAAKjC,KAAKgB,EAASqB,GAC1B,MAAOV,GAAKmB,EAAK,CAAC,EAAGnB,GAAIQ,EAAI,EAjBrB,QAiBoCD,EAAI1B,EAAI,EACtD,GAAY,EAARsC,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEtB,MAAOsB,EAAG,GAAKA,EAAG,QAAK,EAAQhB,MAAM,GArB9BL,CAAK,CAACd,EAAGkC,MAyBhCvD,OAAOgB,OAwB7B,SAAS2C,EAAOC,EAAGvC,GACtB,IAAIwC,EAAsB,oBAAXR,QAAyBO,EAAEP,OAAOC,UACjD,IAAKO,EAAG,OAAOD,EACf,IAAmBE,EAAYzB,EAA3BjB,EAAIyC,EAAEnD,KAAKkD,GAAOG,EAAK,GAC3B,IACI,WAAc,IAAN1C,GAAgBA,KAAM,MAAQyC,EAAI1C,EAAEgB,QAAQI,MAAMuB,EAAGL,KAAKI,EAAE5B,OAExE,MAAO8B,GAAS3B,EAAI,CAAE2B,MAAOA,GAH7B,QAKI,IACQF,IAAMA,EAAEtB,OAASqB,EAAIzC,EAAC,SAAayC,EAAEnD,KAAKU,GADlD,QAGU,GAAIiB,EAAG,MAAMA,EAAE2B,OAE7B,OAAOD,EAgEc/D,OAAOgB,O,ICtLfiD,EA8BAC,EAiBAC,EAeAC,EAuBAC,EA4BAC,EAeAC,EAgBAC,EAgBAC,EAgCAC,EAMLC,EAMAC,EAOAC,EAqHKC,EAQLC,EAiHKC,EA4CAC,EAsBAC,EA2BAC,EAeAC,EAeAC,EA6KAC,EASLC,EAyMKC,EAiBAC,EAeAC,EA4EAC,EAsBAC,EA4BAC,EAOLC,EAoBKC,EAqCAC,EA6BAC,EAuBAC,EAsLAC,EAkIAC,GAmIAC,G,wFChqDXC,GAAe,qCAOfC,GAAc,IAAIC,IAAI,CAC1B,aACA,YACA,iBACA,iBACA,aACA,iBACA,iBACA,eACA,eACA,aACA,aACA,YACA,YACA,YACA,aACA,YACA,YACA,YACA,YACA,cAEIC,GAAiB,IAAID,IAAI,CAAC,aAAc,mBACxCE,GAAkB,IAAIF,IAAI,CAAC,kBAC3BG,GAAoB,IAAIH,IAAI,CAAC,mBAC7BI,GAAqB,IAAIJ,IAAI,CAAC,gBAAiB,kBC5BxCK,GAAqB,CAChCC,WAAY,aACZC,mBAAmB,EACnBzH,OAAQ,GACR0H,mBD0B2D,SAACC,EAAgBzH,GAC5E,IAAI0H,OAAqCC,EACzC,OAAQF,GAEN,IAAK,iBACHC,EAAa,CACXE,SAAU,2CACVC,UAAW,MACXC,eAAgB,OAElB,MACF,IAAK,iBACHJ,EAAa,CACXE,SAAU,2CACVC,UAAW,MACXC,eAAgB,OAElB,MACF,IAAK,iBACHJ,EAAa,CACXE,SAAU,2CACVC,UAAW,MACXC,eAAgB,OAElB,MACF,IAAK,eACHJ,EAAa,CACXE,SAAU,yCACVC,UAAW,MACXC,eAAgB,OAElB,MACF,IAAK,YACHJ,EAAa,CACXE,SAAU,sCACVC,UAAW,MACXC,eAAgB,OAElB,MACF,IAAK,YACHJ,EAAa,CACXE,SAAU,sCACVC,UAAW,MACXC,eAAgB,OAElB,MACF,IAAK,YACHJ,EAAa,CACXE,SAAU,sCACVC,UAAW,MACXC,eAAgB,OAElB,MACF,IAAK,YACHJ,EAAa,CACXE,SAAU,sCACVC,UAAW,MACXC,eAAgB,OAElB,MAEF,QACMf,GAAYgB,IAAIN,KAClBC,EAAa,CACXE,SAAUd,GAAakB,QAAQ,WAAYP,GAC3CI,UAAW,MACXC,eAAgB,QAGhBb,GAAec,IAAIN,KACrBC,EAAa,CACXE,SAxGc,wCAwGYI,QAAQ,WAAYP,GAC9CI,UAAW,WAGXX,GAAgBa,IAAIN,KACtBC,EAAa,CACXE,SA7Ge,kCA6GYI,QAAQ,WAAYP,GAC/CI,UAAW,YAGXV,GAAkBY,IAAIN,KACxBC,EAAa,CACXE,SAlHiB,qCAkHYI,QAAQ,WAAYP,GACjDI,UAAW,cAGXT,GAAmBW,IAAIN,KACzBC,EAAa,CACXE,SAvHkB,qCAuHYI,QAAQ,WAAYP,GAClDI,UAAW,oBAIIF,IAAfD,IACFA,EAAa,CACXE,SAAUd,GAAakB,QAAQ,WAAYP,GAC3CI,UAAW,MACXC,eAAgB,QAIxB,OAAOxF,QAAQC,QAAOlC,EAAC,CAAEyH,eAAgB,OAAUJ,KC/HnDO,UAAW,sBACXC,U,QAAWC,GCGAC,GAAmB,OAC3Bf,IAAkB,CACrBgB,QAAS,UACTC,cAAeC,GAAAA,EACfC,cAAeC,GAAAA,EACfC,kBAAmBC,GAAAA,EACnBC,0BAA2B,SAACrF,GAAe,kBAAM,OAAAjB,QAAQE,OAAO,IAAIqG,MAAM,4BAC1EC,0BAA0BC,EAAAA,GAAAA,GAAiB,CACzCd,UAAWZ,GAAmBY,UAC9Be,c,UAEFC,YAAaC,GAAAA,EACbzB,QAAQ0B,EAAAA,GAAAA,GAAgB,qBACxBC,eAAgB,IAAIC,GAAAA,EACpBC,OAAQC,GAAAA,OACRC,gBAAe,KACfC,YAAaC,GAAAA,SACbC,YAAaC,GAAAA,S,6ECkKf,eAQE,WAAYC,GAAZ,WACMC,EAAY,OACXC,IACAF,GAEDG,GAAYC,EAAAA,GAAAA,IAAoBH,GAChCI,GAAYC,EAAAA,GAAAA,IAAuBH,GACnCI,GAAYC,EAAAA,GAAAA,IAAqBH,GACjCI,GAAYC,EAAAA,GAAAA,IAAmBH,GAC/BI,GAAYC,EAAAA,GAAAA,IAAwBH,GACpCI,GAAYC,EAAAA,GAAAA,IAAuBH,G,OACvCI,EAAAA,EAAAA,KAAAA,KAAMF,IAAU,MACXtK,OAASsK,EACdE,EAAKC,gBAAgBC,KAAIC,EAAAA,GAAAA,IAAiBH,EAAKxK,SAC/CwK,EAAKC,gBAAgBC,KAAIE,EAAAA,GAAAA,IAAeJ,EAAKxK,SAC7CwK,EAAKC,gBAAgBC,KAAIG,EAAAA,GAAAA,IAAuBL,EAAKxK,SACrDwK,EAAKC,gBAAgBC,KAAII,EAAAA,GAAAA,IAAoBN,EAAKxK,SAClDwK,EAAKC,gBAAgBC,KAAIK,EAAAA,GAAAA,IAAgBP,EAAKxK,SAC9CwK,EAAKC,gBAAgBC,KAAIM,EAAAA,GAAAA,IAAmBR,EAAKxK,S,EAMrD,OAhC6Ce,EAAAA,EAAAA,GA6B3CkK,EAAAA,UAAAA,QAAAA,WACEC,EAAAA,UAAMC,QAAOrK,KAAA,OAEjB,EAhCA,CAA6CsK,GAAAA,KJxK7C,SAAiB/G,GACFA,EAAAA,mBAAqB,SAACgH,GAAsC,YACpEA,IAFP,CAAiBhH,IAAAA,EAAuB,KA8BxC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC+G,GAA4B,SAAC,KAC3DA,GACCA,EAAIC,YAAc,CAAEA,WAAYC,GAAAA,MAHxC,CAAiBjH,IAAAA,EAAa,KAiB9B,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC8G,GAAkC,YAChEA,IAFP,CAAiB9G,IAAAA,EAAmB,KAepC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC6G,GAAgC,YAC9DA,IAFP,CAAiB7G,IAAAA,EAAiB,KAuBlC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC4G,GAAmC,YACjEA,IAFP,CAAiB5G,IAAAA,EAAoB,KA4BrC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC2G,GAAoC,YAClEA,IAFP,CAAiB3G,IAAAA,EAAqB,KAetC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC0G,GAAuC,YACrEA,IAFP,CAAiB1G,IAAAA,EAAwB,KAgBzC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACyG,GAAqC,YACnEA,IAFP,CAAiBzG,IAAAA,EAAsB,KAgBvC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACwG,GAAgC,YAC9DA,IAFP,CAAiBxG,IAAAA,EAAiB,KAgClC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACuG,GAAgC,YAC9DA,IAFP,CAAiBvG,IAAAA,EAAiB,KAMlC,SAAYC,GACVA,EAAAA,OAAAA,SACAA,EAAAA,UAAAA,YACAA,EAAAA,sBAAAA,sBAHF,CAAYA,IAAAA,EAAgB,KAM5B,SAAYC,GACVA,EAAAA,UAAAA,YACAA,EAAAA,eAAAA,gBACAA,EAAAA,WAAAA,YACAA,EAAAA,KAAAA,OAJF,CAAYA,IAAAA,EAAiB,KAO7B,SAAYC,GACVA,EAAAA,MAAAA,QACAA,EAAAA,eAAAA,gBACAA,EAAAA,SAAAA,WACAA,EAAAA,cAAAA,eACAA,EAAAA,YAAAA,aALF,CAAYA,IAAAA,EAAgB,KAqH5B,SAAiBC,GACFA,EAAAA,mBAAqB,SAACmG,GAA2B,SAAC,OAC1DA,GACCA,EAAIG,OAAS,CAAEA,MAAOD,GAAAA,KACtBF,EAAII,SAAW,CAAEA,QAASF,GAAAA,MAJlC,CAAiBrG,IAAAA,EAAY,KAQ7B,SAAYC,GACVA,EAAAA,UAAAA,YACAA,EAAAA,OAAAA,SACAA,EAAAA,KAAAA,OAHF,CAAYA,IAAAA,EAAkB,KAiH9B,SAAiBC,GACFA,EAAAA,mBAAqB,SAACiG,GAA4B,SAAC,KAC3DA,GACCA,EAAIG,OAAS,CAAEA,MAAOD,GAAAA,MAH9B,CAAiBnG,IAAAA,EAAa,KA4C9B,SAAiBC,GACFA,EAAAA,mBAAqB,SAACgG,GAAiC,SAAC,WAChEA,GACCA,EAAIK,yBAA2B,CACjCA,wBAAyBL,EAAIK,wBAAwBC,KAAI,SAACC,GAAS,OAAAxG,EAAcyG,mBAAmBD,QAElGP,EAAIS,mBAAqB,CAAEA,kBAAmBP,GAAAA,KAC9CF,EAAIU,cAAgB,CAAEA,aAAc7G,EAAa2G,mBAAmBR,EAAIU,gBACxEV,EAAIW,gBAAkB,CAAEA,eAAgBT,GAAAA,MARhD,CAAiBlG,IAAAA,EAAkB,KAsBnC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC+F,GAAkC,YAChEA,IAFP,CAAiB/F,IAAAA,EAAmB,KA2BpC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC8F,GAAwC,YACtEA,IAFP,CAAiB9F,IAAAA,EAAyB,KAe1C,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC6F,GAAoC,YAClEA,IAFP,CAAiB7F,IAAAA,EAAqB,KAetC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC4F,GAAqC,YACnEA,IAFP,CAAiB5F,IAAAA,EAAsB,KA6KvC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC2F,GAAiC,SAAC,SAChEA,GACCA,EAAIS,mBAAqB,CAAEA,kBAAmBP,GAAAA,KAC9CF,EAAIY,mBAAqB,CAAEA,kBAAmBV,GAAAA,KAC9CF,EAAIW,gBAAkB,CAAEA,eAAgBT,GAAAA,MALhD,CAAiB7F,IAAAA,EAAkB,KASnC,SAAYC,GACVA,EAAAA,eAAAA,gBACAA,EAAAA,cAAAA,eACAA,EAAAA,YAAAA,aACAA,EAAAA,OAAAA,SACAA,EAAAA,UAAAA,YACAA,EAAAA,sBAAAA,sBANF,CAAYA,IAAAA,EAAW,KAyMvB,SAAiBC,GACFA,EAAAA,mBAAqB,SAACyF,GAAkC,SAAC,OACjEA,GACCA,EAAII,SAAW,CAAEA,QAASF,GAAAA,KAC1BF,EAAIW,gBAAkB,CAAEA,eAAgBT,GAAAA,MAJhD,CAAiB3F,IAAAA,EAAmB,KAiBpC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACwF,GAAsC,YACpEA,IAFP,CAAiBxF,IAAAA,EAAuB,KAexC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACuF,GAA4C,YAC1EA,IAFP,CAAiBvF,IAAAA,EAA6B,KA4E9C,SAAiBC,GACFA,EAAAA,mBAAqB,SAACsF,GAA8B,SAAC,WAC7DA,GACCA,EAAIS,mBAAqB,CAAEA,kBAAmBP,GAAAA,KAC9CF,EAAIY,mBAAqB,CAAEA,kBAAmBV,GAAAA,KAC9CF,EAAIa,WAAa,CAAEA,UAAWX,GAAAA,KAC9BF,EAAIW,gBAAkB,CAAEA,eAAgBT,GAAAA,MANhD,CAAiBxF,IAAAA,EAAe,KAsBhC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACqF,GAA+B,YAC7DA,IAFP,CAAiBrF,IAAAA,EAAgB,KA4BjC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACoF,GAA8B,SAAC,KAC7DA,GACCA,EAAIG,OAAS,CAAEA,MAAOD,GAAAA,MAH9B,CAAiBtF,IAAAA,EAAe,KAOhC,SAAYC,GACVA,EAAAA,QAAAA,yCADF,CAAYA,IAAAA,EAAW,KAoBvB,SAAiBC,GACFA,EAAAA,mBAAqB,SAACkF,GAAqB,YACnDA,IAFP,CAAiBlF,IAAAA,EAAM,KAqCvB,SAAiBC,GACFA,EAAAA,mBAAqB,SAACiF,GAAgC,YAC9DA,IAFP,CAAiBjF,IAAAA,EAAiB,KA6BlC,SAAiBC,GACFA,EAAAA,mBAAqB,SAACgF,GAA2B,YACzDA,IAFP,CAAiBhF,IAAAA,EAAY,KAuB7B,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC+E,GAAgC,YAC9DA,IAFP,CAAiB/E,IAAAA,EAAiB,KAsLlC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC8E,GAA+B,SAAC,aAC9DA,GACCA,EAAIc,oBAAsB,CAC5BA,mBAAoBd,EAAIc,mBAAmBR,KAAI,SAACC,GAAS,OAAA3F,EAAgB4F,mBAAmBD,QAE1FP,EAAIG,OAAS,CAAEA,MAAOD,GAAAA,KACtBF,EAAIS,mBAAqB,CAAEA,kBAAmBP,GAAAA,KAC9CF,EAAII,SAAW,CAAEA,QAASF,GAAAA,KAC1BF,EAAIW,gBAAkB,CAAEA,eAAgBT,GAAAA,MAThD,CAAiBhF,IAAAA,EAAgB,KAkIjC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC6E,GAAgC,SAAC,WAC/DA,GACCA,EAAIS,mBAAqB,CAAEA,kBAAmBP,GAAAA,KAC9CF,EAAIU,cAAgB,CAAEA,aAAc7G,EAAa2G,mBAAmBR,EAAIU,gBACxEV,EAAIK,yBAA2B,CACjCA,wBAAyBL,EAAIK,wBAAwBC,KAAI,SAACC,GAAS,OAAAxG,EAAcyG,mBAAmBD,QAElGP,EAAIW,gBAAkB,CAAEA,eAAgBT,GAAAA,MARhD,CAAiB/E,KAAAA,GAAiB,KAmIlC,SAAiBC,GACFA,EAAAA,mBAAqB,SAAC4E,GAAiC,SAAC,OAChEA,GACCA,EAAII,SAAW,CAAEA,QAASF,GAAAA,KAC1BF,EAAIW,gBAAkB,CAAEA,eAAgBT,GAAAA,MAJhD,CAAiB9E,KAAAA,GAAkB,K,cKjkC7B2F,GAAkD,SACtDC,EACAC,GAAuB,0C,0FAIf,O,QADHD,I,KACG,GAAME,GAAUF,EAAOtJ,KAAMuJ,I,cAF/BE,EAAY,0BAEhBC,EAAAA,KAAMC,EAAAA,OAAqCD,MAGzCE,EAAoB,eACxBA,EAAYC,GAAsBP,EAAQG,EAAazJ,MAC/C8J,G,IACD,sB,IACA,kE,IAOA,sB,IACA,kE,IAOA,oB,IACA,gE,IAOA,4B,IACA,wE,IAOA,2B,IACA,wE,IAOA,yB,IACA,sE,IAOA,wB,IACA,qE,IAOA,yB,IACA,sE,IAOA,oB,IACA,iE,IAOA,0B,IACA,uE,IAOA,gC,IACA,6E,oBA9EG,O,OAAA,GAAMC,GAAoDN,EAAcF,I,OAI9E,OALAS,EAAW,yCACLL,EAAAA,UAAiF,CACrFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,OAIM,O,OAAA,GAAMc,GAAoDX,EAAcF,I,OAI9E,OALAS,EAAW,yCACLL,EAAAA,UAAiF,CACrFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,OAIM,O,OAAA,GAAMe,GAAkDZ,EAAcF,I,OAI5E,OALAS,EAAW,yCACLL,EAAAA,UAA+E,CACnFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,OAIM,O,OAAA,GAAMgB,GAA0Db,EAAcF,I,OAIpF,OALAS,EAAW,yCACLL,EAAAA,UAAuF,CAC3FM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMiB,GAAyDd,EAAcF,I,QAInF,OALAS,EAAW,yCACLL,EAAAA,UAAsF,CAC1FM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMkB,GAAuDf,EAAcF,I,QAIjF,OALAS,EAAW,yCACLL,EAAAA,UAAoF,CACxFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMmB,GAAsDhB,EAAcF,I,QAIhF,OALAS,EAAW,yCACLL,EAAAA,UAAmF,CACvFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMoB,GAAuDjB,EAAcF,I,QAIjF,OALAS,EAAW,yCACLL,EAAAA,UAAoF,CACxFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMqB,GAAkDlB,EAAcF,I,QAI5E,OALAS,EAAW,yCACLL,EAAAA,UAA+E,CACnFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMsB,GAAwDnB,EAAcF,I,QAIlF,OALAS,EAAW,yCACLL,EAAAA,UAAqF,CACzFM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMuB,GAA8DpB,EAAcF,I,QAIxF,OALAS,EAAW,yCACLL,EAAAA,UAA2F,CAC/FM,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAEMwB,EAAarB,EAAazJ,KAChC4J,EAAYkB,EAAWC,MAAQD,EAAWE,MAAQpB,EAClDI,EAAW9M,EAAAA,EAAAA,GACN4N,GAAU,CACbb,KAAM,GAAGL,EACTlB,QAASoC,EAAWpC,SAAWoC,EAAWG,SAAWrB,EACrDsB,OAAQ,SACRhB,UAAWC,GAAoBb,K,mBAMrC,OAHMZ,EAAUsB,EAAStB,SAAWsB,EAASiB,SAAWrB,EACxDI,EAAStB,QAAUA,SACZsB,EAASiB,QAChB,GAAO9L,QAAQE,OAAOhC,OAAOiB,OAAO,IAAIoH,MAAMgD,GAAUsB,aAyEpDmB,GAA+C,SACnD7B,EACAC,GAAuB,0C,oFAIf,O,QADHD,I,KACG,GAAME,GAAUF,EAAOtJ,KAAMuJ,I,cAF/BE,EAAY,0BAEhB2B,EAAAA,KAAMC,EAAAA,OAAqCD,MAGzCxB,EAAoB,eACxBA,EAAYC,GAAsBP,EAAQG,EAAazJ,MAC/C8J,G,IACD,sB,IACA,kE,IAOA,sB,IACA,kE,IAOA,oB,IACA,gE,IAOA,4B,IACA,wE,IAOA,2B,IACA,wE,IAOA,yB,IACA,sE,IAOA,wB,IACA,qE,IAOA,oB,IACA,iE,oBAtDG,O,OAAA,GAAMC,GAAoDN,EAAcF,I,OAI9E,OALAS,EAAW,yCACLqB,EAAAA,UAAiF,CACrFpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,OAIM,O,OAAA,GAAMc,GAAoDX,EAAcF,I,OAI9E,OALAS,EAAW,yCACLqB,EAAAA,UAAiF,CACrFpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,OAIM,O,OAAA,GAAMe,GAAkDZ,EAAcF,I,OAI5E,OALAS,EAAW,yCACLqB,EAAAA,UAA+E,CACnFpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,OAIM,O,OAAA,GAAMgB,GAA0Db,EAAcF,I,OAIpF,OALAS,EAAW,yCACLqB,EAAAA,UAAuF,CAC3FpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMiB,GAAyDd,EAAcF,I,QAInF,OALAS,EAAW,yCACLqB,EAAAA,UAAsF,CAC1FpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMkB,GAAuDf,EAAcF,I,QAIjF,OALAS,EAAW,yCACLqB,EAAAA,UAAoF,CACxFpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMmB,GAAsDhB,EAAcF,I,QAIhF,OALAS,EAAW,yCACLqB,EAAAA,UAAmF,CACvFpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAIM,O,OAAA,GAAMqB,GAAkDlB,EAAcF,I,QAI5E,OALAS,EAAW,yCACLqB,EAAAA,UAA+E,CACnFpB,KAAML,EACNM,UAAWC,GAAoBb,MAEjC,O,QAEMwB,EAAarB,EAAazJ,KAChC4J,EAAYkB,EAAWC,MAAQD,EAAWE,MAAQpB,EAClDI,EAAW9M,EAAAA,EAAAA,GACN4N,GAAU,CACbb,KAAM,GAAGL,EACTlB,QAASoC,EAAWpC,SAAWoC,EAAWG,SAAWrB,EACrDsB,OAAQ,SACRhB,UAAWC,GAAoBb,K,mBAMrC,OAHMZ,EAAUsB,EAAStB,SAAWsB,EAASiB,SAAWrB,EACxDI,EAAStB,QAAUA,SACZsB,EAASiB,QAChB,GAAO9L,QAAQE,OAAOhC,OAAOiB,OAAO,IAAIoH,MAAMgD,GAAUsB,aA4JpDD,GAAsD,SAC1DN,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAAgC,CACpCrB,KAAM,sBACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/BwB,aAASzG,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtBiL,SAA0C,OAAjBM,EAAKN,UACrCK,EAASL,QAAUM,EAAKN,SAE1B,GAAOK,UAGHlB,GAAsD,SAC1DX,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAAgC,CACpCrB,KAAM,sBACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAGHjB,GAAoD,SACxDZ,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAA8B,CAClCrB,KAAM,oBACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAGHhB,GAA4D,SAChEb,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAAsC,CAC1CrB,KAAM,4BACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/BwB,aAASzG,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtBiL,SAA0C,OAAjBM,EAAKN,UACrCK,EAASL,QAAUM,EAAKN,SAE1B,GAAOK,UAGHf,GAA2D,SAC/Dd,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAAqC,CACzCrB,KAAM,2BACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAGHd,GAAyD,SAC7Df,EACAF,GAAuB,0C,mCAgBvB,OAdM+B,EAAmC,CACvCrB,KAAM,yBACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,EACTgH,uBAAmBhH,QAEuBA,IAAxCiF,EAAagC,QAAQ,iBACvBH,EAASE,kBAAoB/B,EAAagC,QAAQ,qBAG/BjH,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAGHb,GAAwD,SAC5DhB,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAAkC,CACtCrB,KAAM,wBACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/BwB,aAASzG,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtBiL,SAA0C,OAAjBM,EAAKN,UACrCK,EAASL,QAAUM,EAAKN,SAE1B,GAAOK,UAGHZ,GAAyD,SAC7DjB,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAAmC,CACvCrB,KAAM,yBACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAGHX,GAAoD,SACxDlB,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAA8B,CAClCrB,KAAM,oBACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAGHV,GAA0D,SAC9DnB,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAAoC,CACxCrB,KAAM,0BACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAGHT,GAAgE,SACpEpB,EACAF,GAAuB,0C,mCAYvB,OAVM+B,EAA0C,CAC9CrB,KAAM,gCACNiB,OAAQ,SACRhB,UAAWC,GAAoBV,GAC/Bf,aAASlE,QAGUA,KADf+G,EAAY9B,EAAazJ,MACtB0I,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,SAE1B,GAAO4C,UAiBHI,GAAmD,SACvDC,EACApC,GAEA,OAAOlM,OAAOuO,QAAQD,GAAOE,QAAO,SAACC,EAAgCC,G,MAAAC,EAAAA,EAAAA,EAAAA,GAACC,EAAG,KAAE1M,EAAK,KAC9E,OAAc,OAAVA,EACKuM,EAET,OACKA,KAAGhC,EAAAA,IACLmC,GAAM1M,EAAKuK,MAEb,KAGCoC,GAA2C,SAACP,EAAwBpC,GACxE,OAAOoC,EACJQ,QAAO,SAACzM,GAAW,OAAK,MAALA,KACnBkJ,KAAI,SAACwD,GACJ,OAAc,OAAVA,EACK,KAlC6B,SAACT,EAAsBpC,GACjE,qBACqB/E,IAAfmH,EAAM1B,MAAqC,OAAf0B,EAAM1B,MAAiB,CAAEA,KAAM0B,EAAM1B,YAC5CzF,IAArBmH,EAAMpD,YACa,OAArBoD,EAAMpD,YAAuB,CAC3BA,WAAYmD,GAAiDC,EAAMpD,WAAYgB,UAE1D/E,IAArBmH,EAAMU,YACa,OAArBV,EAAMU,YAAuB,CAC3BA,WAAYC,GAA8CX,EAAMU,WAAY9C,KA2BvEgD,CAAoCH,EAAO7C,OAIlD+C,GAAgD,SACpDX,EACApC,GAEA,mBACoC/E,IAA9BmH,EAAMa,qBACsB,OAA9Bb,EAAMa,qBAAgC,CAAEA,oBAAqBb,EAAMa,2BAC3ChI,IAAtBmH,EAAMc,aAAmD,OAAtBd,EAAMc,aAAwB,CAAEA,YAAad,EAAMc,eA8CxFC,GAAkC,SAACf,EAAkCpC,GACzE,OAAOlM,OAAOuO,QAAQD,GAAOE,QAAO,SAACC,EAAgCC,G,MAAAC,EAAAA,EAAAA,EAAAA,GAACC,EAAG,KAAE1M,EAAK,KAC9E,OAAc,OAAVA,EACKuM,EAET,OACKA,KAAGhC,EAAAA,IACLmC,GAAM1M,EAAKuK,MAEb,KAiBC6C,GAAqD,SACzDrD,EACAC,GAEA,OAAOlM,OAAOuO,QAAQtC,GAAQuC,QAAO,SAACC,EAAgCC,G,MAAAC,EAAAA,EAAAA,EAAAA,GAACC,EAAG,KAAE1M,EAAK,KAC/E,OAAc,OAAVA,EACKuM,EAET,OACKA,KAAGhC,EAAAA,IACLmC,GAAM1M,EAAKuK,MAEb,KAGC8C,GAA6C,SAACtD,EAAaC,GAC/D,OAAQD,GAAU,IACf6C,QAAO,SAACzM,GAAW,OAAK,MAALA,KACnBkJ,KAAI,SAACwD,GACJ,OAAc,OAAVA,EACK,KAlC+B,SAAC9C,EAAaC,GAC1D,MAAO,CACLU,UAAsBzF,IAAhB8E,EAAOW,MAAsC,OAAhBX,EAAOW,KAAgBX,EAAOW,UAAOzF,EACxE+D,gBACwB/D,IAAtB8E,EAAOf,YAAkD,OAAtBe,EAAOf,WACtCoE,GAAmDrD,EAAOf,WAAYgB,QACtE/E,EACN6H,gBACwB7H,IAAtB8E,EAAO+C,YAAkD,OAAtB/C,EAAO+C,WACtCQ,GAAgDvD,EAAO+C,WAAY9C,QACnE/E,GA0BGsI,CAAsCV,EAAO7C,OAIpDsD,GAAkD,SACtDvD,EACAC,GAEA,MAAO,CACLiD,yBACiChI,IAA/B8E,EAAOkD,qBAAoE,OAA/BlD,EAAOkD,oBAC/ClD,EAAOkD,yBACPhI,EACNiI,iBAAoCjI,IAAvB8E,EAAOmD,aAAoD,OAAvBnD,EAAOmD,YAAuBnD,EAAOmD,iBAAcjI,IA4ClGuI,GAAgD,SAACzD,EAAaC,GAClE,OAAQD,GAAU,IACf6C,QAAO,SAACzM,GAAW,OAAK,MAALA,KACnBkJ,KAAI,SAACwD,GACJ,OAAc,OAAVA,EACK,KArBmC,SAAC9C,EAAaC,GAC9D,MAAO,CACLyD,uBAC+BxI,IAA7B8E,EAAO0D,mBAAgE,OAA7B1D,EAAO0D,kBAC7C1D,EAAO0D,uBACPxI,EACNyI,aACqBzI,IAAnB8E,EAAO2D,SAA4C,OAAnB3D,EAAO2D,QACnCC,GAAsC5D,EAAO2D,QAAS1D,QACtD/E,EACN2I,cAA8B3I,IAApB8E,EAAO6D,UAA8C,OAApB7D,EAAO6D,SAAoB7D,EAAO6D,cAAW3I,EACxF4I,cAA8B5I,IAApB8E,EAAO8D,UAA8C,OAApB9D,EAAO8D,SAAoB9D,EAAO8D,cAAW5I,EACxF6I,WAAwB7I,IAAjB8E,EAAO+D,OAAwC,OAAjB/D,EAAO+D,MAAiB/D,EAAO+D,WAAQ7I,GAWnE8I,CAA0ClB,EAAO7C,OAIxDgE,GAA2C,SAACjE,EAAaC,GAC7D,MAAO,CACLiE,WAAwBhJ,IAAjB8E,EAAOkE,OAAwC,OAAjBlE,EAAOkE,MAAiBlE,EAAOkE,WAAQhJ,IAI1EiJ,GAAqC,SAACnE,EAAaC,GACvD,OAAQD,GAAU,IACf6C,QAAO,SAACzM,GAAW,OAAK,MAALA,KACnBkJ,KAAI,SAACwD,GACJ,OAAc,OAAVA,EACK,KAEFsB,GAAwCtB,EAAO7C,OAoCtD2D,GAAwC,SAAC5D,EAAaC,GAC1D,OAAQD,GAAU,IACf6C,QAAO,SAACzM,GAAW,OAAK,MAALA,KACnBkJ,KAAI,SAACwD,GACJ,OAAc,OAAVA,EACK,KAzGwB,SAAC9C,EAAaC,GACnD,MAAO,CACLoE,UAAsBnJ,IAAhB8E,EAAOqE,MAAsC,OAAhBrE,EAAOqE,KAAgBrE,EAAOqE,UAAOnJ,EACxEjF,WAAwBiF,IAAjB8E,EAAO/J,OAAwC,OAAjB+J,EAAO/J,MAAiB+J,EAAO/J,WAAQiF,GAwGnEoJ,CAA+BxB,OAItCsB,GAA0C,SAACpE,EAAaC,GAC5D,MAAO,CACLsE,gBAAkCrJ,IAAtB8E,EAAOuE,YAAkD,OAAtBvE,EAAOuE,WAAsBvE,EAAOuE,gBAAarJ,EAChGsJ,yBACiCtJ,IAA/B8E,EAAOwE,qBAAoE,OAA/BxE,EAAOwE,oBAC/CP,GAAyCjE,EAAOwE,oBAAqBvE,QACrE/E,EACNiE,WACmBjE,IAAjB8E,EAAOb,OAAwC,OAAjBa,EAAOb,MACjCsF,GAAkCzE,EAAOb,MAAOc,QAChD/E,IAIJwJ,GAAuC,SAAC1E,EAAaC,GACzD,MAAO,CACL0E,iBAAoCzJ,IAAvB8E,EAAO2E,aAAoD,OAAvB3E,EAAO2E,YAAuB3E,EAAO2E,iBAAczJ,EACpG0J,wBACgC1J,IAA9B8E,EAAO4E,oBAAkE,OAA9B5E,EAAO4E,mBAC9CnB,GAA8CzD,EAAO4E,mBAAoB3E,QACzE/E,EACN2J,aAA4B3J,IAAnB8E,EAAO6E,SAA4C,OAAnB7E,EAAO6E,QAAmB7E,EAAO6E,aAAU3J,IAIlF4J,GAA4C,SAAC9E,EAAaC,GAC9D,MAAO,CACL8E,oBAC4B7J,IAA1B8E,EAAO+E,gBAA0D,OAA1B/E,EAAO+E,eAA0B/E,EAAO+E,oBAAiB7J,EAClG8J,oBAC4B9J,IAA1B8E,EAAOgF,gBAA0D,OAA1BhF,EAAOgF,eAA0BhF,EAAOgF,oBAAiB9J,IAIhGuJ,GAAoC,SAACzE,EAAaC,GACtD,OAAOlM,OAAOuO,QAAQtC,GAAQuC,QAAO,SAACC,EAAgCC,G,MAAAC,EAAAA,EAAAA,EAAAA,GAACC,EAAG,KAAE1M,EAAK,KAC/E,OAAc,OAAVA,EACKuM,EAET,OACKA,KAAGhC,EAAAA,IACLmC,GAAM1M,EAAKuK,MAEb,KAGCK,GAAsB,SAACb,G,MAA+C,MAAC,CAC3EiF,eAAgBjF,EAAOkF,WACvBC,UAA6C,QAApC,EAAEnF,EAAOmC,QAAQ,2BAAmBM,IAAAA,EAAAA,EAAIzC,EAAOmC,QAAQ,qBAChEiD,kBAAmBpF,EAAOmC,QAAQ,cAClCkD,KAAMrF,EAAOmC,QAAQ,iBAYjBmD,GAAoB,SAACC,EAAiBtF,GAC1C,OATkB,SAACsF,EAAoCtF,GACvD,YADmB,IAAAsF,IAAAA,EAAAA,IAAsBC,YACrCD,aAAsBC,WACjB3P,QAAQC,QAAQyP,GAElBtF,EAAQlD,gBAAgBwI,IAAe1P,QAAQC,QAAQ,IAAI0P,YAKlEC,CAAYF,EAAYtF,GAASzJ,MAAK,SAACE,GAAS,OAAAuJ,EAAQ/C,YAAYxG,OAEhEgP,GAA4B,SAACzP,GACjC,YAAUiF,IAAVjF,GACU,OAAVA,GACU,KAAVA,KACElC,OAAO4R,oBAAoB1P,GAAO2P,SAAS,WAA6B,GAAhB3P,EAAMX,WAC9DvB,OAAO4R,oBAAoB1P,GAAO2P,SAAS,SAAyB,GAAd3P,EAAM4P,OAE1D3F,GAAY,SAACqF,EAAiBtF,GAClC,OAAAqF,GAAkBC,EAAYtF,GAASzJ,MAAK,SAACsP,GAC3C,OAAIA,EAAQxQ,OACHyQ,KAAKC,MAAMF,GAEb,OAMLvF,GAAwB,SAACP,EAAwBiC,GACrD,IAAiBgE,EAAatD,EAExBuD,EAAoB,SAACC,GACzB,IAAIC,EAAaD,EAOjB,OANIC,EAAWC,QAAQ,MAAQ,IAC7BD,EAAaA,EAAWE,MAAM,KAAK,IAEjCF,EAAWC,QAAQ,MAAQ,IAC7BD,EAAaA,EAAWE,MAAM,KAAK,IAE9BF,GAGHG,GAbWN,EAaSjG,EAAOmC,QAbHQ,EAaY,mBAbI5O,OAAOyS,KAAKP,GAAQQ,MAAK,SAACC,GAAM,OAAAA,EAAEC,gBAAkBhE,EAAIgE,kBActG,YAAkBzL,IAAdqL,EACKL,EAAkBlG,EAAOmC,QAAQoE,SAGxBrL,IAAd+G,EAAKR,KACAyE,EAAkBjE,EAAKR,WAGTvG,IAAnB+G,EAAI,OACCiE,EAAkBjE,EAAI,QAGxB,I,WC7+CT,eAQE,WAAqBI,GAArB,MAEExD,EAAAA,KAAAA,OAAO,K,OAFYV,EAAAA,MAAAA,E,EA8CvB,OAtDqCzJ,EAAAA,EAAAA,GAiBnCkS,EAAAA,UAAAA,kBAAAA,SACEC,EACAzJ,EACA7J,GAEAC,KAAK4K,gBAAgBC,KAAIyI,EAAAA,GAAAA,IAAe1J,EAAe5J,KAAKuT,UAAWvT,KAAKwT,cAE5E,IAAMC,EAAQJ,EAAYK,OAAO1T,KAAK4K,iBAKhC+I,EAAmD,CACvD9T,OAJiB+J,EAAa,OAK9BgK,WAJiB,0BAKjBC,YAJkB,kBAKlBC,wBAAyB5N,EAAgB8F,mBACzC+H,yBAA0BrN,EAAiBsF,oBAErC7C,EAAmBS,EAAa,eACxC,OAAO6J,EAAMnR,SACX,SAAC0R,GACC,OAAA7K,EAAe8K,OAAOD,EAAQA,QAA0BjU,GAAW,MACrE4T,IAIIP,EAAAA,UAAAA,UAAR,SAAkBvE,EAA6BpC,GAC7C,OD+DiD,SACnDoC,EACApC,GAAuB,0C,wEAMvB,GAJMkC,EAAe,CACnB,eAAgB,oBAEduF,EAAe,0DACGxM,IAAlBmH,EAAMsF,QAOR,MAAM,IAAIvL,MAAM,oDALhB,IADMwL,EAAqBvF,EAAMsF,SAClBrS,QAAU,EACvB,MAAM,IAAI8G,MAAM,uDAMpB,GAJEsL,EAAeA,EAAanM,QAAQ,aAAasM,EAAAA,GAAAA,IAA6BD,SAIzD1M,IAAnBmH,EAAMyF,SAOR,MAAM,IAAI1L,MAAM,qDALhB,IADMwL,EAAqBvF,EAAMyF,UAClBxS,QAAU,EACvB,MAAM,IAAI8G,MAAM,wDAMpB,GAJEsL,EAAeA,EAAanM,QAAQ,cAAcsM,EAAAA,GAAAA,IAA6BD,SAI5D1M,IAAjBmH,EAAM0F,OAOR,MAAM,IAAI3L,MAAM,mDALhB,IADMwL,EAAqBvF,EAAM0F,QAClBzS,QAAU,EACvB,MAAM,IAAI8G,MAAM,sDAsB2B,OApB7CsL,EAAeA,EAAanM,QAAQ,YAAYsM,EAAAA,GAAAA,IAA6BD,IAK/ElR,EAAOqP,KAAKiC,UAASpU,EAACA,EAAAA,EAAAA,EAAAA,QACSsH,IAAzBmH,EAAM1C,gBACiB,OAAzB0C,EAAM1C,gBAA2B,CAC/BA,eAAgBiD,GAAyCP,EAAM1C,eAAgBM,UAE3D/E,IAApBmH,EAAMxC,WAA+C,OAApBwC,EAAMxC,WAAsB,CAAEA,UAAWwC,EAAMxC,iBACpD3E,IAA5BmH,EAAMzC,mBACoB,OAA5ByC,EAAMzC,mBAA8B,CAClCA,kBAAmBwD,GAAgCf,EAAMzC,kBAAmBK,UAEhD/E,IAA5BmH,EAAM5C,mBACoB,OAA5B4C,EAAM5C,mBAA8B,CAClCA,kBAAmB2D,GAAgCf,EAAM5C,kBAAmBQ,MAGnC,GAAMA,EAAQgI,Y,OAC7D,OADMxF,EAAyCC,EAAAA,OAAvCvH,EAAQ,WAAEqF,EAAAA,EAAAA,SAAA0H,OAAQ,IAAG,UAAO1H,EAAE2H,EAAI,OAC1C,GAAO,IAAIC,GAAAA,GAAc,CACvBF,SAAQ,EACR/M,SAAQ,EACRgN,KAAI,EACJE,OAAQ,OACRlG,QAAO,EACPmG,KAAMZ,EACNhR,KAAI,YC1HG6R,CAAsClG,EAAOpC,IAG9C2G,EAAAA,UAAAA,YAAR,SAAoB5G,EAAwBC,GAC1C,ODskBmD,SACrDD,EACAC,GAAuB,0C,0DAEvB,OAA0B,MAAtBD,EAAOkF,YAAsBlF,EAAOkF,YAAc,IACpD,GAAOrD,GAA6C7B,EAAQC,KAExD+B,EAAkC,CACtCpB,UAAWC,GAAoBb,GAC/BL,oBAAgBzE,EAChB4E,wBAAoB5E,EACpBsN,gBAAYtN,EACZuN,iBAAavN,EACbqJ,gBAAYrJ,EACZkE,aAASlE,EACTwN,mBAAexN,EACfsJ,yBAAqBtJ,EACrByN,kBAAczN,EACd0N,uBAAmB1N,EACnBuE,uBAAmBvE,EACnB2N,eAAW3N,EACX4N,kBAAc5N,EACdiE,WAAOjE,GAES,GAAMgF,GAAUF,EAAOtJ,KAAMuJ,K,OA2C/C,YA1C4B/E,KADtB+G,EAAYQ,EAAAA,QACT9C,gBAAwD,OAAxBsC,EAAKtC,iBAC5CqC,EAASrC,eAAiB2D,GAA2CrB,EAAKtC,eAAgBM,SAE5D/E,IAA5B+G,EAAKnC,oBAAgE,OAA5BmC,EAAKnC,qBAChDkC,EAASlC,mBAAqBqE,GAAmClC,EAAKnC,mBAAoBG,SAEpE/E,IAApB+G,EAAKuG,YAAgD,OAApBvG,EAAKuG,aACxCxG,EAASwG,WAAavG,EAAKuG,iBAEJtN,IAArB+G,EAAKwG,aAAkD,OAArBxG,EAAKwG,cACzCzG,EAASyG,YAAcxG,EAAKwG,kBAENvN,IAApB+G,EAAKsC,YAAgD,OAApBtC,EAAKsC,aACxCvC,EAASuC,WAAatC,EAAKsC,iBAERrJ,IAAjB+G,EAAK7C,SAA0C,OAAjB6C,EAAK7C,UACrC4C,EAAS5C,QAAU6C,EAAK7C,cAEClE,IAAvB+G,EAAKyG,eAAsD,OAAvBzG,EAAKyG,gBAC3C1G,EAAS0G,cAAgBzG,EAAKyG,oBAECxN,IAA7B+G,EAAKuC,qBAAkE,OAA7BvC,EAAKuC,sBACjDxC,EAASwC,oBAAsBP,GAAyChC,EAAKuC,oBAAqBvE,SAE1E/E,IAAtB+G,EAAK0G,cAAoD,OAAtB1G,EAAK0G,eAC1C3G,EAAS2G,aAAejE,GAAqCzC,EAAK0G,aAAc1I,SAEnD/E,IAA3B+G,EAAK2G,mBAA8D,OAA3B3G,EAAK2G,oBAC/C5G,EAAS4G,kBAAoB9D,GAA0C7C,EAAK2G,kBAAmB3I,SAElE/E,IAA3B+G,EAAKxC,mBAA8D,OAA3BwC,EAAKxC,oBAC/CuC,EAASvC,kBAAoBgF,GAAkCxC,EAAKxC,kBAAmBQ,SAElE/E,IAAnB+G,EAAK4G,WAA8C,OAAnB5G,EAAK4G,YACvC7G,EAAS6G,UAAY5G,EAAK4G,gBAEF3N,IAAtB+G,EAAK6G,cAAoD,OAAtB7G,EAAK6G,eAC1C9G,EAAS8G,aAAe7G,EAAK6G,mBAEZ5N,IAAf+G,EAAK9C,OAAsC,OAAf8C,EAAK9C,QACnC6C,EAAS7C,MAAQsF,GAAkCxC,EAAK9C,MAAOc,IAEjE,GAAOpK,QAAQC,QAAQkM,WCzoBd+G,CAAwC/I,EAAQC,IAK3D,EAtDA,CAAqC+I,GAAAA,ICErC,eAQE,WAAqB3G,GAArB,MAEExD,EAAAA,KAAAA,OAAO,K,OAFYV,EAAAA,MAAAA,E,EA8CvB,OAtDwCzJ,EAAAA,EAAAA,GAiBtCuU,EAAAA,UAAAA,kBAAAA,SACEpC,EACAzJ,EACA7J,GAEAC,KAAK4K,gBAAgBC,KAAIyI,EAAAA,GAAAA,IAAe1J,EAAe5J,KAAKuT,UAAWvT,KAAKwT,cAE5E,IAAMC,EAAQJ,EAAYK,OAAO1T,KAAK4K,iBAKhC+I,EAAmD,CACvD9T,OAJiB+J,EAAa,OAK9BgK,WAJiB,0BAKjBC,YAJkB,qBAKlBC,wBAAyBjO,EAAmBmG,mBAC5C+H,yBAA0BhO,EAAoBiG,oBAExC7C,EAAmBS,EAAa,eACxC,OAAO6J,EAAMnR,SACX,SAAC0R,GACC,OAAA7K,EAAe8K,OAAOD,EAAQA,QAA0BjU,GAAW,MACrE4T,IAII8B,EAAAA,UAAAA,UAAR,SAAkB5G,EAAgCpC,GAChD,OFNoD,SACtDoC,EACApC,GAAuB,0C,wEAsBvB,GApBMkC,EAAO,WACX,eAAgB,2BAChB,uBAAwB,oBACpBuD,GAA0BrD,EAAM5C,oBAAsB,CACxD,+BAAgCyJ,OAAOC,KAAKC,GAAAA,GAAAA,WAA4B/G,EAAM5C,oBAAqB4J,SACjG,YAGA3D,GAA0BrD,EAAMzC,oBAAsB,CACxD,+BAAgCsJ,OAAOC,KAAKC,GAAAA,GAAAA,WAA4B/G,EAAMzC,oBAAqByJ,SACjG,YAGA3D,GAA0BrD,EAAMsC,cAAgB,CAAE,eAAgBtC,EAAMsC,cACxEe,GAA0BrD,EAAMiH,SAAW,CAAEA,OAAQjH,EAAMiH,SAC3D5D,GAA0BrD,EAAM1C,iBAAmB,CACrD,4BAA6BuJ,OAAOC,KAAKC,GAAAA,GAAAA,WAA4B/G,EAAM1C,iBAAkB0J,SAAS,YAGtG3B,EAAe,6DACGxM,IAAlBmH,EAAMsF,QAOR,MAAM,IAAIvL,MAAM,oDALhB,IADMwL,EAAqBvF,EAAMsF,SAClBrS,QAAU,EACvB,MAAM,IAAI8G,MAAM,uDAMpB,GAJEsL,EAAeA,EAAanM,QAAQ,aAAasM,EAAAA,GAAAA,IAA6BD,SAIzD1M,IAAnBmH,EAAMyF,SAOR,MAAM,IAAI1L,MAAM,qDALhB,IADMwL,EAAqBvF,EAAMyF,UAClBxS,QAAU,EACvB,MAAM,IAAI8G,MAAM,wDAMpB,GAJEsL,EAAeA,EAAanM,QAAQ,cAAcsM,EAAAA,GAAAA,IAA6BD,SAI5D1M,IAAjBmH,EAAM0F,OAOR,MAAM,IAAI3L,MAAM,mDALhB,IADMwL,EAAqBvF,EAAM0F,QAClBzS,QAAU,EACvB,MAAM,IAAI8G,MAAM,sDAU2B,OAR7CsL,EAAeA,EAAanM,QAAQ,YAAYsM,EAAAA,GAAAA,IAA6BD,SAKrD1M,IAAtBmH,EAAMkH,cACR7S,EAAO2L,EAAMkH,aAEgC,GAAMtJ,EAAQgI,Y,OAC7D,OADMxF,EAAyCC,EAAAA,OAAvCvH,EAAQ,WAAEqF,EAAAA,EAAAA,SAAA0H,OAAQ,IAAG,UAAO1H,EAAE2H,EAAI,OAC1C,GAAO,IAAIC,GAAAA,GAAc,CACvBF,SAAQ,EACR/M,SAAQ,EACRgN,KAAI,EACJE,OAAQ,OACRlG,QAAO,EACPmG,KAAMZ,EACNhR,KAAI,YEzDG8S,CAAyCnH,EAAOpC,IAGjDgJ,EAAAA,UAAAA,YAAR,SAAoBjJ,EAAwBC,GAC1C,OF2XsD,SACxDD,EACAC,GAAuB,0C,mCAEvB,OAA0B,MAAtBD,EAAOkF,YAAsBlF,EAAOkF,YAAc,IACpD,GAAOnF,GAAgDC,EAAQC,KAE3D+B,EAAqC,CACzCpB,UAAWC,GAAoBb,GAC/BL,oBAAgBzE,EAChB4E,wBAAoB5E,EACpBuO,iBAAavO,EACbsN,gBAAYtN,EACZyJ,iBAAazJ,EACbuN,iBAAavN,EACbwO,qBAAiBxO,EACjBqJ,gBAAYrJ,EACZkE,aAASlE,EACTwN,mBAAexN,EACfsJ,yBAAqBtJ,EACrB0N,uBAAmB1N,EACnBuE,uBAAmBvE,EACnB2N,eAAW3N,EACX4N,kBAAc5N,EACdiE,WAAOjE,QAE8BA,IAAnC8E,EAAOmC,QAAQ,kBACjBH,EAAS2C,YAAc3E,EAAOmC,QAAQ,sBAEQjH,IAA5C8E,EAAOmC,QAAQ,2BACjBH,EAASuC,WAAavE,EAAOmC,QAAQ,+BAEmBjH,IAAtD8E,EAAOmC,QAAQ,qCACjBH,EAASwC,oBAAsB,IAAI4E,GAAAA,GACjCF,OAAOC,KAAKnJ,EAAOmC,QAAQ,mCAAoC,UAAUkH,SAAS,gBAG9BnO,IAApD8E,EAAOmC,QAAQ,mCACjBH,EAASlC,mBAAqB,IAAIsJ,GAAAA,GAChCF,OAAOC,KAAKnJ,EAAOmC,QAAQ,iCAAkC,UAAUkH,SAAS,gBAG1CnO,IAAtC8E,EAAOmC,QAAQ,qBACjBH,EAAS7C,MAAQ,IAAIiK,GAAAA,GAAiBF,OAAOC,KAAKnJ,EAAOmC,QAAQ,mBAAoB,UAAUkH,SAAS,gBAEnDnO,IAAnD8E,EAAOmC,QAAQ,kCACjBH,EAASvC,kBAAoB,IAAI2J,GAAAA,GAC/BF,OAAOC,KAAKnJ,EAAOmC,QAAQ,gCAAiC,UAAUkH,SAAS,gBAGrCnO,IAA1C8E,EAAOmC,QAAQ,yBACjBH,EAAS4G,kBAAoB5I,EAAOmC,QAAQ,6BAEFjH,IAAxC8E,EAAOmC,QAAQ,uBACjBH,EAAS5C,QAAUY,EAAOmC,QAAQ,2BAEejH,IAA/C8E,EAAOmC,QAAQ,8BACjBH,EAAS0G,cAAgB1I,EAAOmC,QAAQ,kCAEOjH,IAA7C8E,EAAOmC,QAAQ,4BACjBH,EAASyG,YAAczI,EAAOmC,QAAQ,gCAEWjH,IAA/C8E,EAAOmC,QAAQ,8BACjBH,EAAS8G,aAAe9I,EAAOmC,QAAQ,kCAEYjH,IAAjD8E,EAAOmC,QAAQ,gCACjBH,EAAS0H,gBAAkB1J,EAAOmC,QAAQ,oCAEIjH,IAA5C8E,EAAOmC,QAAQ,2BACjBH,EAASwG,WAAaxI,EAAOmC,QAAQ,+BAEQjH,IAA3C8E,EAAOmC,QAAQ,0BACjBH,EAAS6G,UAAY7I,EAAOmC,QAAQ,8BAEcjH,IAAhD8E,EAAOmC,QAAQ,+BACjBH,EAASrC,eAAiB,IAAIyJ,GAAAA,GAC5BF,OAAOC,KAAKnJ,EAAOmC,QAAQ,6BAA8B,UAAUkH,SAAS,WAG1EpH,EAAYjC,EAAOtJ,KACzBsL,EAASyH,YAAcxH,EACvB,GAAOpM,QAAQC,QAAQkM,WE5cd2H,CAA2C3J,EAAQC,IAK9D,EAtDA,CAAwC+I,GAAAA,I,sBCjG3BY,GAAU,SACtBC,GAEA,GAAIA,aAAkBC,MAAQD,aAAkBE,eAC/C,OAAO,IAAIC,SAASH,GAClBI,cACAzT,MAAK,SAAA0T,GAAU,WAAI1E,WAAW0E,MAEhC,MAAM,IAAI9N,MAAM,+B,g3DCsBZ/I,GAAS,IAAIC,EAAAA,EAAO,kBAE1B,eAIC,WAAYC,QAAA,IAAAA,IAAAA,EAAAA,IAAZ,MACCsL,EAAAA,KAAAA,KAAMtL,IAAQ,K,OACd4K,EAAKgM,sBAAwB,G,EAuI/B,OA7IoCzV,GAAAA,EAAAA,GASnC0V,EAAAA,UAAAA,gBAAAA,WACC,MAAO,kBAGRA,EAAAA,UAAAA,gBAAAA,SAAgBnI,EAAMoI,GAAtB,WAEChX,GAAOQ,MAAM,oBAAqBoO,EAAKwG,aAEjB,wBAArBxG,EAAKwG,aACgB,cAArBxG,EAAKwG,cAE8C,oBAAxCjV,KAAK2W,sBAAsBE,IACrCC,YACC,WACC,SAAKH,sBAAsBE,GAAS,KAAM,CAAElL,MAAO8C,EAAK9C,UACzD,GAKD3L,KAAKC,SACuC,oBAArCD,KAAKC,QAAQ4W,GAASE,YAE7BD,YACC,WAAM,SAAK7W,QAAQ4W,GAASE,WAAW,KAAM,CAAEpL,MAAO8C,EAAK9C,UAC3D,IAKsB,WAArB8C,EAAKwG,cAC2C,oBAAxCjV,KAAK2W,sBAAsBE,IACrCC,YACC,WAAM,SAAKH,sBAAsBE,GAAS,6BAC1C,GAKD7W,KAAKC,SACuC,oBAArCD,KAAKC,QAAQ4W,GAASE,YAE7BD,YACC,WAAM,SAAK7W,QAAQ4W,GAASE,WAAW,6BACvC,KAMEH,EAAAA,UAAAA,YAAN,SACCC,EACAjL,G,oHAEA,OAAK5L,KAAKC,QAAQ4W,GAGE,GAAMG,GAAAA,GAAAA,OAFzB,GAAO3U,QAAQE,OAAO,OAASsU,EAAU,oB,OAG1C,KADMI,EAAchI,EAAAA,QAEnB,SAAO5M,QAAQE,OAAO,mB,GAGvBvC,KAAKkX,wBAA0B,IAAI9L,GAAwB,CAC1D5D,OAAQxH,KAAKC,QAAQ4W,GAASrP,OAC9ByP,YAAW,EACXE,iBAAiBC,EAAAA,GAAAA,QAIK,kBAAZxL,EAAP,YACHyL,EAAS,CACR/C,SAAUtU,KAAKC,QAAQ4W,GAASS,MAChCnD,QAAS0C,EACTxK,UAAWT,EACX2I,OAAQ0C,EAAYM,YAGrB1X,GAAOQ,MAAM,kBAAmBuL,G,iBAIlB,O,sBADP4L,EAAkB,IAAIpE,GAAgBiE,GAC/B,GAAMrX,KAAKkX,wBAAwBO,KAAKD,I,OAErD,OAFM/I,EAAOQ,EAAAA,OACbjP,KAAK0X,gBAAgBjJ,EAAMoI,GAC3B,GAAOpI,G,OAEP,O,WAAA,GAAOpM,QAAQE,OAAOoV,I,2BAItBC,EAEGhM,EAAO,QADCiM,EACRjM,EAAO,QAAAiM,YAEVR,EADmB,UAAhBQ,EACM,CACRvD,SAAUtU,KAAKC,QAAQ4W,GAASS,MAChCnD,QAAS0C,EACT1F,YAAa,iCACb4E,YAAa6B,EACbrD,OAAQ0C,EAAYM,WACpBzB,OAAQ,cAGA,CACRxB,SAAUtU,KAAKC,QAAQ4W,GAASS,MAChCnD,QAAS0C,EACT1F,YAAa,4BACb4E,YAAa6B,EACbrD,OAAQ0C,EAAYM,WACpBzB,OAAQ,cAGVjW,GAAOQ,MAAM,qBAAsBuL,G,iBAGrB,O,wBADPkM,EAAqB,IAAIrC,GAAmB4B,GACrC,GAAMrX,KAAKkX,wBAAwBO,KAC/CK,I,OAEkB,OAHbrJ,EAAOQ,EAAAA,OAGM,GAAMmH,GAAQ3H,EAAKwH,c,OAEtC,OAFM8B,EAAa9I,EAAAA,OACnBjP,KAAK0X,gBAAgBjJ,EAAMoI,GAC3B,YAAYpI,GAAS,CAAEwH,YAAa8B,K,QAEpC,O,WAAA,GAAO1V,QAAQE,OAAOyV,I,0BAKzBpB,EAAAA,UAAAA,WAAAA,SAAWC,EAAiBoB,GAC3B,IAAKjY,KAAKC,QAAQ4W,GACjB,MAAM,IAAIqB,WAAW,OAASrB,EAAU,mBAEzC7W,KAAK2W,sBAAsBE,GAAWoB,GAExC,EA7IA,CAAoC/X,G,miDCZ9BL,GAAS,IAAIC,EAAAA,EAAO,gBA+HbqY,GAAe,IA7H5B,WAUC,WAAYpY,GACXC,KAAKoY,SAAWrY,EAChBF,GAAOQ,MAAM,uBAAwBL,KAAKoY,UAC1CpY,KAAKqY,YAAc,GA8GrB,OA3GQC,EAAAA,UAAAA,cAAP,WACC,MAAO,gBAQRA,EAAAA,UAAAA,UAAAA,SAAUvY,GAAV,WACOwY,EAAMxY,EAAUA,EAAQoY,cAAgBpY,EAAU,GACxDF,GAAOQ,MAAM,yBAA0B,CAAEkY,IAAG,IAC5CvY,KAAKoY,SAAQhY,GAAAA,GAAAA,CAAKoY,KAAM,IAAOD,GAAQA,EAAIJ,cAE3C,IAAMM,EAAkBzY,KAAKoY,SAASK,gBAChCC,EAAc1Y,KAAKoY,SAASI,KA0BlC,OAxBKjY,OAAOyS,KAAK0F,GAAa5W,QAAU2W,GAEnC5X,MAAM8X,QAAQF,IACjBA,EAAgBG,SAAQ,SAAAC,GACvBlO,EAAKyN,SAASI,KAAKK,EAAI1L,MAAQ0L,MAOhC7Y,KAAKqY,YAAYzB,gBAClB8B,GACAnY,OAAOyS,KAAK0F,GACV5M,KAAI,SAAAqD,GAAO,OAAAuJ,EAAYvJ,MACvB8D,MAAK,SAAA4F,GAAO,OAACA,EAAIC,cAAqC,mBAArBD,EAAIC,kBAEvC9Y,KAAKqY,YAAYzB,eAAiB,IAAIA,IAGvCrW,OAAOyS,KAAKhT,KAAKqY,aAAavM,KAAI,SAAAqD,GACjCxE,EAAK0N,YAAYlJ,GAAK4J,UAAUpO,EAAKyN,SAASI,SAGxCxY,KAAKoY,UAGNE,EAAAA,UAAAA,aAAP,SAAoBU,GACnB,GAAIA,GAAyC,iBAA5BA,EAAUC,cAAkC,CAC5D,GAAKjZ,KAAKqY,YAAYW,EAAU1Y,mBAK/B,MAAM,IAAIsI,MACT,OAASoQ,EAAU1Y,kBAAoB,oBAHxC,OAFA0Y,EAAUD,UAAU/Y,KAAKoY,SAASI,WAClCxY,KAAKqY,YAAYW,EAAU1Y,mBAAqB0Y,KAsBtCV,EAAAA,UAAAA,KAAb,SACCzB,EACAjL,G,kGAEA,IAAK5L,KAAKoY,SAASI,OAASxY,KAAKoY,SAASI,KAAK3B,GAC9C,MAAM,IAAIjO,MAAM,OAASiO,EAAU,mBAMpC,GAHMqC,EACLlZ,KAAKoY,SAASI,KAAK3B,GAASiC,cAAgB,kBAExC9Y,KAAKqY,YAAYa,GACrB,MAAM,IAAItQ,MACT,OACCsQ,EACA,gEAGI,SAAMlZ,KAAKqY,YAAYa,GAAaC,YAAYtC,EAASjL,I,OAAhE,SAAOqD,EAAAA,gBAGDqJ,EAAAA,UAAAA,WAAP,SAAkBzB,EAAiBoB,GAClC,IAAKjY,KAAKoY,SAASI,OAASxY,KAAKoY,SAASI,KAAK3B,GAC9C,MAAM,IAAIjO,MAAM,OAASiO,EAAU,mBAEpC,IAAMqC,EACLlZ,KAAKoY,SAASI,KAAK3B,GAASiC,cAAgB,iBAE7C,IAAK9Y,KAAKqY,YAAYa,GACrB,MAAM,IAAItQ,MACT,OACCsQ,EACA,gEAGHlZ,KAAKqY,YAAYa,GAAanC,WAAWF,EAASoB,IAEpD,EA3HA,GA6H4B,CAAsB,MAClDmB,EAAAA,GAAAA,SAAiBjB,ICrJjB,IA+aIkB,GASAC,GAMAC,GA9bAvX,GAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAS,MAAUK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,OAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUL,MAAME,EAASC,GAAc,KAAKS,YAGlEM,GAA4C,SAAUhB,EAASiB,GAC/D,IAAsGC,EAAGC,EAAG3B,EAAG4B,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAP/B,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOgC,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEV,KAAMgB,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,oBAAXC,SAA0BP,EAAEO,OAAOC,UAAY,WAAa,OAAO7D,OAAUqD,EACvJ,SAASM,EAAK/B,GAAK,OAAO,SAAUkC,GAAK,OACzC,SAAcC,GACV,GAAIZ,EAAG,MAAM,IAAIhC,UAAU,mCAC3B,KAAOmC,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAM3B,EAAY,EAARsC,EAAG,GAASX,EAAC,OAAaW,EAAG,GAAKX,EAAC,SAAe3B,EAAI2B,EAAC,SAAe3B,EAAER,KAAKmC,GAAI,GAAKA,EAAET,SAAWlB,EAAIA,EAAER,KAAKmC,EAAGW,EAAG,KAAKhB,KAAM,OAAOtB,EAE3J,OADI2B,EAAI,EAAG3B,IAAGsC,EAAK,CAAS,EAARA,EAAG,GAAQtC,EAAEgB,QACzBsB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGtC,EAAIsC,EAAI,MACxB,KAAK,EAAc,OAAXT,EAAEC,QAAgB,CAAEd,MAAOsB,EAAG,GAAIhB,MAAM,GAChD,KAAK,EAAGO,EAAEC,QAASH,EAAIW,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKT,EAAEI,IAAIM,MAAOV,EAAEG,KAAKO,MAAO,SACxC,QACI,KAAkBvC,GAAZA,EAAI6B,EAAEG,MAAY3B,OAAS,GAAKL,EAAEA,EAAEK,OAAS,MAAkB,IAAViC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAET,EAAI,EAAG,SACjG,GAAc,IAAVS,EAAG,MAActC,GAAMsC,EAAG,GAAKtC,EAAE,IAAMsC,EAAG,GAAKtC,EAAE,IAAM,CAAE6B,EAAEC,MAAQQ,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYT,EAAEC,MAAQ9B,EAAE,GAAI,CAAE6B,EAAEC,MAAQ9B,EAAE,GAAIA,EAAIsC,EAAI,MAC7D,GAAItC,GAAK6B,EAAEC,MAAQ9B,EAAE,GAAI,CAAE6B,EAAEC,MAAQ9B,EAAE,GAAI6B,EAAEI,IAAIO,KAAKF,GAAK,MACvDtC,EAAE,IAAI6B,EAAEI,IAAIM,MAChBV,EAAEG,KAAKO,MAAO,SAEtBD,EAAKb,EAAKjC,KAAKgB,EAASqB,GAC1B,MAAOV,GAAKmB,EAAK,CAAC,EAAGnB,GAAIQ,EAAI,EAjBrB,QAiBoCD,EAAI1B,EAAI,EACtD,GAAY,EAARsC,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEtB,MAAOsB,EAAG,GAAKA,EAAG,QAAK,EAAQhB,MAAM,GArB9BL,CAAK,CAACd,EAAGkC,OAwBzD0V,GAAkD,WAClD,IAAK,IAAI9X,EAAI,EAAGC,EAAI,EAAG8X,EAAK5X,UAAUC,OAAQH,EAAI8X,EAAI9X,IAAKD,GAAKG,UAAUF,GAAGG,OACxE,IAAIuC,EAAIxD,MAAMa,GAAIwR,EAAI,EAA3B,IAA8BvR,EAAI,EAAGA,EAAI8X,EAAI9X,IACzC,IAAK,IAAI+X,EAAI7X,UAAUF,GAAIgY,EAAI,EAAGC,EAAKF,EAAE5X,OAAQ6X,EAAIC,EAAID,IAAKzG,IAC1D7O,EAAE6O,GAAKwG,EAAEC,GACjB,OAAOtV,GAiEPwV,GAAc,SAAUC,EAAMC,EAAQC,GACtC,IAAK,IAAIrY,EAAI,EAAGA,EAAIqY,EAAOlY,OAAQH,IAC/BmY,EAAKG,SAASF,EAASpY,EAAGqY,EAAOE,WAAWvY,KAMhDwY,GAAY,SAAUC,EAASC,GAI/B,IAAIC,EAA6B,EAAjBF,EAAQtY,OAEpByY,EAAW,EAAID,EAGf5D,EAAS,IAAI8D,YAFG,GAAeD,GAG/BT,EAAO,IAAIW,SAAS/D,GAqBxB,OAhBAmD,GAAYC,EAAM,EAAG,QACrBA,EAAKY,UAAU,EAXD,GAWcH,GAAU,GACtCV,GAAYC,EAAM,EAAG,QAErBD,GAAYC,EAAM,GAAI,QACtBA,EAAKY,UAAU,GAAIC,IAAa,GAChCb,EAAKc,UAAU,GAAI,GAAG,GACtBd,EAAKc,UAAU,GAAI,GAAG,GACtBd,EAAKY,UAAU,GAAIL,GAAkB,GACrCP,EAAKY,UAAU,GAAuB,EAAnBL,GAAsB,GACzCP,EAAKc,UAAU,GAAI,GAAG,GACtBd,EAAKc,UAAU,GAAI,IAAI,GAEvBf,GAAYC,EAAM,GAAI,QACtBA,EAAKY,UAAU,GAAIJ,GAAW,GA/CZ,SAAU9N,EAAQuN,EAAQlL,GAE5C,IADA,IAAIgM,EAAad,EACRpY,EAAI,EAAGA,EAAIkN,EAAM/M,OAAQH,IAAKkZ,GAAc,EAAG,CACpD,IAAInZ,EAAIoZ,KAAKC,KAAK,EAAGD,KAAKE,IAAI,EAAGnM,EAAMlN,KACvC6K,EAAOyO,SAASJ,EAAYnZ,EAAI,EAAQ,MAAJA,EAAiB,MAAJA,GAAY,IA4CjEwZ,CAAgBpB,EAAM,GAAIM,GACnBN,GAUPqB,GAAe,SAAUC,EAAWC,EAAWC,EAAkBjB,GACjE,IAAIkB,EAjGW,SAAUC,EAAaH,GAGtC,IAFA,IAAIvY,EAAS,IAAI2Y,aAAaJ,GAC1BtB,EAAS,EACJpY,EAAI,EAAGA,EAAI6Z,EAAY1Z,OAAQH,IACpCmB,EAAO4Y,IAAIF,EAAY7Z,GAAIoY,GAC3BA,GAAUyB,EAAY7Z,GAAGG,OAE7B,OAAOgB,EA0Fa6Y,CAAaP,EAAWC,GACxCO,EAtFe,SAAUlF,EAAQ4E,EAAkBjB,GACvD,GAAIA,IAAqBiB,EACrB,OAAO5E,EAOX,IALA,IAAImF,EAAkBP,EAAmBjB,EACrCyB,EAAYhB,KAAKiB,MAAMrF,EAAO5U,OAAS+Z,GACvC/Y,EAAS,IAAI2Y,aAAaK,GAC1BE,EAAe,EACfC,EAAe,EACZD,EAAelZ,EAAOhB,QAAQ,CAGjC,IAFA,IAAIoa,EAAmBpB,KAAKiB,OAAOC,EAAe,GAAKH,GACnDM,EAAQ,EAAGC,EAAQ,EACdza,EAAIsa,EAActa,EAAIua,GAAoBva,EAAI+U,EAAO5U,OAAQH,IAClEwa,GAASzF,EAAO/U,GAChBya,IAEJtZ,EAAOkZ,GAAgBG,EAAQC,EAC/BJ,IACAC,EAAeC,EAEnB,OAAOpZ,EAkEiBuZ,CAAiBd,EAAeD,EAAkBjB,GACtEiC,EAAanC,GAAUyB,EAAmBvB,GAI9C,OAHgB,IAAI/D,KAAK,CAACgG,GAAa,CACnCC,KA9GwB,8BAkH5B1c,GAAS,IAAIC,EAAAA,EAAO,iBACpB0c,GAA+B,WAC/B,SAASA,EAAczc,GAEnBC,KAAKyc,aAAe,GACpBzc,KAAK0c,mBAAqB,EAC1B1c,KAAK2c,WAAY,EACjB3c,KAAKD,QAAUA,EA2NnB,OArNAyc,EAAczb,UAAU6b,KAAO,WAC3B,OAAO5a,GAAUhC,UAAM,OAAQ,GAAQ,WACnC,IAAI2K,EAAQ3K,KACZ,OAAOiD,GAAYjD,MAAM,SAAUiP,GAC/B,OAAQA,EAAG1L,OACP,KAAK,EACD,OAAKsZ,EAAAA,EAAAA,MAAgBC,WACrBC,OAAOC,aACHD,OAAOC,cAAgBD,OAAOE,mBAClCjd,KAAKkd,aAAe,IAAIF,aACjB,CAAC,EAAaG,UAAUC,aACtBC,aAAa,CAAEC,OAAO,IACtBta,MAAK,SAAUqT,GAChB1L,EAAM4S,gBAAiB,EACvB5S,EAAM6S,gBAAgBnH,MAErBoH,OAAM,WAEP,OADA9S,EAAM4S,gBAAiB,EAChBlb,QAAQE,OAAO,+BAZS,CAAC,EAAa,GAczD,KAAK,EAED,OADA0M,EAAGzL,OACI,CAAC,EAAa,GACzB,KAAK,EAED,OADAxD,KAAKud,gBAAiB,EACf,CAAC,EAAclb,QAAQE,OAAO,2BACzC,KAAK,EAAG,MAAO,CAAC,WAQhCia,EAAczb,UAAUyc,gBAAkB,SAAUnH,GAChD,OAAOrU,GAAUhC,UAAM,OAAQ,GAAQ,WACnC,IAAI2X,EAAO+F,EAAYC,EAAeC,EAClCjT,EAAQ3K,KACZ,OAAOiD,GAAYjD,MAAM,SAAUiP,GAC/B,OAAQA,EAAG1L,OACP,KAAK,EAED,OADA0L,EAAGxL,KAAKQ,KAAK,CAAC,EAAG,EAAJ,CAAS,IACf,CAAC,EAAajE,KAAKkd,aAAaW,UAC3C,KAAK,EAED,OADA5O,EAAGzL,OACI,CAAC,EAAa,GACzB,KAAK,EAGD,OAFAmU,EAAQ1I,EAAGzL,OACX3D,GAAO0E,MAAMoT,GACN,CAAC,EAAa,GACzB,KAAK,EAmBD,OAlBA+F,EAAa1d,KAAKkd,aAAaY,wBAAwBzH,IACvDsH,EAAgB3d,KAAKkd,aAAaa,sBAAsB,KAAM,EAAG,IACnDC,eAAiB,SAAUC,GACrC,GAAKtT,EAAMgS,UAAX,CAEA,IAAItG,EAAS4H,EAAqBC,YAAYC,eAAe,GAC7DxT,EAAM8R,aAAaxY,KAAK,IAAIwX,aAAapF,IACzC1L,EAAM+R,oBAAsBrG,EAAOvU,OACnC6I,EAAMyT,aAEVR,EAAe5d,KAAKkd,aAAamB,kBACpBC,aAzLd,GA0LCV,EAAaW,aA3Ld,GA4LCX,EAAaY,sBA1LH,IA2LVd,EAAWe,QAAQb,GACnBA,EAAaa,QAAQd,GACrBA,EAAcc,QAAQf,EAAWjR,QAAQiS,aACzC1e,KAAK4d,aAAeA,EACb,CAAC,WAW5BpB,EAAczb,UAAU4d,eAAiB,SAAUC,EAAWC,GAC1D,OAAO7c,GAAUhC,UAAM,OAAQ,GAAQ,WACnC,IAAIyM,EAASuL,EACb,OAAO/U,GAAYjD,MAAM,SAAUiP,GAC/B,OAAQA,EAAG1L,OACP,KAAK,EACD,GAAIvD,KAAK2c,YAAc3c,KAAKud,eACxB,MAAO,CAAC,GACZvd,KAAK4e,UAAYA,GAAa,aAC9B5e,KAAK6e,WAAaA,GAAc,aAChCpS,EAAUzM,KAAKkd,aACfjO,EAAG1L,MAAQ,EACf,KAAK,EAED,OADA0L,EAAGxL,KAAKQ,KAAK,CAAC,EAAG,EAAJ,CAAS,IACf,CAAC,EAAawI,EAAQoR,UACjC,KAAK,EAED,OADA5O,EAAGzL,OACI,CAAC,EAAa,GACzB,KAAK,EAGD,OAFAwU,EAAQ/I,EAAGzL,OACX3D,GAAO0E,MAAMyT,GACN,CAAC,EAAa,GACzB,KAAK,EAGD,OAFAhY,KAAK8e,MAAQC,KAAKC,MAClBhf,KAAK2c,WAAY,EACV,CAAC,WAQ5BH,EAAczb,UAAUke,cAAgB,WAC/Bjf,KAAKud,iBAEVvd,KAAK2c,WAAY,IAKrBH,EAAczb,UAAUme,MAAQ,WAC5Blf,KAAKif,gBACLjf,KAAK0c,mBAAqB,EAC1B1c,KAAKyc,aAAe,IAOxBD,EAAczb,UAAUoe,KAAO,SAAUzI,GACrC,IAAI/L,EAAQ3K,KACZ,GAAK0W,GAAW1W,KAAKud,eAArB,CAEA,IAAI6B,EAAS,IAAI9I,KAAK,CAACI,IACvB,OAAO,IAAIrU,SAAQ,SAAUgd,EAAKC,GAC9B,IAAIC,EAAa,IAAIC,WACrBD,EAAWE,OAAS,WACZ9U,EAAM+U,gBACN/U,EAAM+U,eAAeC,aACzBhV,EAAM+U,eAAiB/U,EAAMuS,aAAa0C,qBAY1CjV,EAAMuS,aAAa2C,gBAAgBN,EAAWzc,QAXxB,SAAUgd,GAC5BnV,EAAM+U,eAAehJ,OAASoJ,EAC9BnV,EAAM+U,eAAejB,QAAQ9T,EAAMuS,aAAawB,aAChD/T,EAAM+U,eAAeK,QAAU,WAC3B,OAAOV,KAEX1U,EAAM+U,eAAeZ,MAAM,MAEX,SAAUkB,GAC1B,OAAOV,EAAIU,OAInBT,EAAWU,QAAU,WAAc,OAAOX,KAC1CC,EAAWW,kBAAkBd,QAMrC5C,EAAczb,UAAUof,KAAO,WACvBngB,KAAK0f,gBACL1f,KAAK0f,eAAeS,QAM5B3D,EAAczb,UAAUqd,QAAU,WAC9B,GAAKpe,KAAKud,eAAV,CAEA,IAAI6C,EAAWpgB,KAAK4d,aACpBwC,EAASC,QA3SF,KA4SP,IAAIC,EAAeF,EAASC,QACxBE,EAAY,IAAIvO,WAAWsO,GAC3BE,EAAYxgB,KAAKD,QAAQygB,UACzBC,EAAOzgB,KAAKD,QAAQ0gB,KACxBL,EAASM,sBAAsBH,GAC/BvgB,KAAK6e,WAAW0B,EAAWD,GAC3B,IAAK,IAAI3e,EAAI,EAAGA,EAAI2e,EAAc3e,IAAK,CAEnC,IAAIgf,EAAkBJ,EAAU5e,GAAK,IAAM,GACvCgf,EAAkBH,GAAaG,GAAmB,EAAIH,KACtDxgB,KAAK8e,MAAQC,KAAKC,OAGZD,KAAKC,MACShf,KAAK8e,MACf2B,GACdzgB,KAAK4e,cAQbpC,EAAczb,UAAU6f,UAAY,SAAUvG,GAE1C,YADyB,IAArBA,IAA+BA,EAtUV,MAuUlBrY,GAAUhC,UAAM,OAAQ,GAAQ,WACnC,IAAIsb,EAAkBuF,EACtB,OAAO5d,GAAYjD,MAAM,SAAUiP,GAC/B,OAAKjP,KAAKud,gBAEVjC,EAAmBtb,KAAKkd,aAAa4D,WACrCD,EAAO1F,GAAanb,KAAKyc,aAAczc,KAAK0c,mBAAoBpB,EAAkBjB,GAClFra,KAAKkf,QACE,CAAC,EAAc2B,IAJX,CAAC,UAQjBrE,EAjOwB,IA2QnC,SAAWnD,GACPA,EAAUA,EAAS,QAAc,GAAK,UACtCA,EAAUA,EAAS,UAAgB,GAAK,YACxCA,EAAUA,EAAS,YAAkB,GAAK,cAC1CA,EAAUA,EAAS,aAAmB,GAAK,eAC3CA,EAAUA,EAAS,MAAY,GAAK,QALxC,CAMGA,KAAcA,GAAY,KAG7B,SAAWC,GACPA,EAAW,IAAU,MACrBA,EAAW,KAAW,OAF1B,CAGGA,KAAgBA,GAAc,KAGjC,SAAWC,GACPA,EAAcA,EAAa,YAAkB,GAAK,cAClDA,EAAcA,EAAa,cAAoB,GAAK,gBAFxD,CAGGA,KAAkBA,GAAgB,KACrC,IAAIwH,GAAgC,WAChC,SAASC,EAAQC,GACb,IAAItW,EAAQ3K,MACZkhB,EAAAA,EAAAA,GAAiBlhB,KAAMihB,GAEvBjhB,KAAKmhB,iBAAkB,EAEvBnhB,KAAKohB,oBAAqB,EAE1BphB,KAAKqhB,SAAWC,EAAAA,EAAAA,cAEhBthB,KAAKuhB,cAAe,EAEpBvhB,KAAKwhB,aAAc,EAEnBxhB,KAAKyhB,YAAc,KAEnBzhB,KAAK0hB,iBAAmB,GAExB1hB,KAAK2hB,SAAW,GAEhB3hB,KAAK6Q,KAAO,GAEZ7Q,KAAK4hB,UAAYvI,GAAUwI,QAI3B7hB,KAAK8hB,WAAa,SAAUH,GACxB,IAAII,EAAcJ,EAAS7V,KAAI,SAAUF,GAAW,OAAQoW,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,UAAYrW,EAAQ+J,MAAQ/J,EAAQgM,YAClH,GAAIjN,EAAMiX,YAAcvI,GAAU6I,aAC9BvX,EAAMiX,YAAcvI,GAAU8I,aAAc,CAE5C,IAAIC,EAASzX,EAAMiX,YAAcvI,GAAU6I,YACrC5I,GAAY+I,IACZ/I,GAAYgJ,KAClBP,EAAY9d,MAAK+d,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,UAAYG,IAAUJ,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,gBAAkBG,IAAUJ,EAAAA,EAAAA,GAAE,OAAQ,CAAEC,MAAO,cAAeD,EAAAA,EAAAA,GAAE,OAAQ,CAAEC,MAAO,gBAAiBD,EAAAA,EAAAA,GAAE,OAAQ,CAAEC,MAAO,iBAEpM,OAAOF,GAEX/hB,KAAKuiB,eAAgBC,EAAAA,EAAAA,GAAYxiB,KAAM,gBAAiB,GA6P5D,OA1PAghB,EAAQjgB,UAAU0hB,cAAgB,SAAUC,GACxC1iB,KAAK2iB,mBAKT3B,EAAQjgB,UAAU6hB,kBAAoB,WAClC,IAAKzK,IAAmD,oBAA5BA,GAAapB,WACrC,MAAM,IAAInO,MAAMia,EAAAA,GAEpB7iB,KAAK8iB,iBAET9B,EAAQjgB,UAAUgiB,mBAAqB,WAEnC,IAAI7f,EAAOlD,KAAKgjB,QAAQC,WAAWC,cAAc,SACjDhgB,EAAKigB,UAAYjgB,EAAKkgB,cAE1BpC,EAAQjgB,UAAU+hB,cAAgB,WAC9B,IAAInY,EAAQ3K,KACZ,GAAKA,KAAKuhB,cAAiBvhB,KAAKwhB,YAI3B,GAAKxhB,KAAKmU,QAAV,CAIDnU,KAAKqjB,gBACLrjB,KAAKsjB,aAAatjB,KAAKqjB,eAAgB/J,GAAY+I,KAEnDriB,KAAKuhB,eACLvhB,KAAKujB,cAAgB,IAAI/G,GAAc,CACnCiE,KAAMzgB,KAAKyhB,YACXjB,UAAWxgB,KAAK0hB,mBAEpB1hB,KAAKujB,cAAc3G,OAAOa,OAAM,SAAUuC,GACtCrV,EAAM6Y,SAASxD,EAAKzG,GAAckK,iBAgB1C,IACItL,GAAapB,WAAW/W,KAAKmU,SAbhB,SAAU6L,EAAKvR,GAC5B9D,EAAM4X,cAAcmB,KAAK,CACrBjV,KAAMA,EACNuR,IAAKA,IAELrV,EAAMwW,gBACNxW,EAAMgZ,QAGNhZ,EAAMiX,UAAYvI,GAAUwI,WAMpC,MAAO7B,GACHhgB,KAAKwjB,SAASxD,EAAKzG,GAAcqK,qBAhCjC5jB,KAAKwjB,SAASlC,EAAAA,EAAAA,kBAAgC/H,GAAcqK,oBAJ5D5jB,KAAKwjB,SAASlC,EAAAA,EAAAA,oBAAkC/H,GAAcqK,gBA0CtE5C,EAAQjgB,UAAU8iB,aAAe,SAAUC,GACvCA,EAAMC,iBACN/jB,KAAK2iB,mBAET3B,EAAQjgB,UAAUijB,gBAAkB,WAChC,IAAIrZ,EAAQ3K,KACRA,KAAK4hB,YAAcvI,GAAUwI,UAEjC7hB,KAAKujB,cAAcpD,OACnBngB,KAAK4hB,UAAYvI,GAAU4K,UAC3BjkB,KAAKujB,cAAc5E,gBAAe,WAAc,OAAOhU,EAAMuZ,mBAAoB,SAAUzV,EAAM3M,GAAU,OAAO6I,EAAMkU,WAAWpQ,EAAM3M,QAE7Ikf,EAAQjgB,UAAUmjB,cAAgB,WAC9B,IAAIvZ,EAAQ3K,KACZA,KAAK4hB,UAAYvI,GAAU8I,aAC3BniB,KAAKujB,cAActE,gBACnBjf,KAAKujB,cAAc3C,YAAY5d,MAAK,SAAU6d,GAC1ClW,EAAMwZ,iBAAiBtD,OAG/BG,EAAQjgB,UAAUqjB,iBAAmB,SAAUN,GAC3C,IAAIO,EAASP,EAAMO,OACnBrkB,KAAK6Q,KAAOwT,EAAO5hB,OAEvBue,EAAQjgB,UAAUujB,mBAAqB,WACnCtkB,KAAKujB,cAAcrE,QACnBlf,KAAK4hB,UAAYvI,GAAUwI,SAE/Bb,EAAQjgB,UAAUwjB,iBAAmB,SAAUC,GAC3CxkB,KAAKuE,WAAQmD,EAET8c,IAAcjL,GAAckK,cAC5BzjB,KAAK4hB,UAAYvI,GAAUwI,UAMnCb,EAAQjgB,UAAU8d,WAAa,SAAU0B,EAAWD,IAzMxC,SAAUC,EAAWD,EAAcmE,GAC/C,GAAKA,EAAL,CAEA,KAAK5H,EAAAA,EAAAA,MAAgBC,UACjB,MAAM,IAAIlU,MAAM,mDACpB,IAAIqG,EAAKwV,EAAOC,wBAAyBC,EAAQ1V,EAAG0V,MAAOC,EAAS3V,EAAG2V,OAEvEH,EAAOE,MAAQA,EACfF,EAAOG,OAASA,EAChB,IAAIC,EAAYJ,EAAOK,WAAW,MAClCD,EAAUE,UAAY,QACtBF,EAAUG,UAAU,EAAG,EAAGL,EAAOC,GAwBjCK,uBAvBW,WACPJ,EAAUK,SAAS,EAAG,EAAGP,EAAOC,GAChCC,EAAUM,UAAY,EACtB,IAAIC,EAAQC,iBAAiBC,SAASC,iBAAiBC,iBAAiB,2BACxEX,EAAUY,YAAeL,GAAmB,KAAVA,EAA2BA,EAAZ,UACjDP,EAAUa,YAGV,IAFA,IAAIC,EAAsB,EAARhB,EAAerE,EAC7BsF,EAAI,EACCjkB,EAAI,EAAGA,EAAI2e,GAAgB3e,EAAI,IAAM,EAAGA,IAAK,CAClD,IACIyB,EADQmd,EAAU5e,GAAK,IACVijB,EAAU,EACjB,IAANjjB,EACAkjB,EAAUgB,OAAOD,EAAGxiB,GAGpByhB,EAAUiB,OAAOF,EAAGxiB,GAExBwiB,GAAKD,EAETd,EAAUiB,OAAOrB,EAAOE,MAAOF,EAAOG,OAAS,GAC/CC,EAAUkB,aA2KVC,CAAUzF,EAAWD,EADRtgB,KAAKgjB,QAAQC,WAAWC,cAAc,YAMvDlC,EAAQjgB,UAAU4hB,gBAAkB,WAChC,OAAO3gB,GAAUhC,UAAM,OAAQ,GAAQ,WACnC,IAAI6Q,EAAM3D,EAAU+Y,EACpB,OAAOhjB,GAAYjD,MAAM,SAAUiP,GAC/B,OAAQA,EAAG1L,OACP,KAAK,EACD,GAAyB,IAArBvD,KAAK6Q,KAAK/O,QAAgB9B,KAAK4hB,YAAcvI,GAAUwI,QACvD,MAAO,CAAC,GACZhR,EAAO7Q,KAAK6Q,KACZ7Q,KAAK6Q,KAAO,GACZ7Q,KAAKsjB,aAAazS,EAAMyI,GAAYgJ,MACpCtiB,KAAK4hB,UAAYvI,GAAU6I,YAC3BjT,EAAG1L,MAAQ,EACf,KAAK,EAED,OADA0L,EAAGxL,KAAKQ,KAAK,CAAC,EAAG,EAAJ,CAAS,IACf,CAAC,EAAakU,GAAaV,KAAKzX,KAAKmU,QAAStD,IACzD,KAAK,EAED,OADA3D,EAAW+B,EAAGzL,OACP,CAAC,EAAa,GACzB,KAAK,EAGD,OAFAyiB,EAAQhX,EAAGzL,OACXxD,KAAKwjB,SAASyC,EAAO1M,GAAckK,aAC5B,CAAC,GACZ,KAAK,EAKD,OAJIvW,EAAStB,SACT5L,KAAKsjB,aAAapW,EAAStB,QAAS0N,GAAY+I,KAEpDriB,KAAK4hB,UAAYvI,GAAUwI,QACpB,CAAC,WAK5Bb,EAAQjgB,UAAUojB,iBAAmB,SAAU+B,GAC3C,OAAOlkB,GAAUhC,UAAM,OAAQ,GAAQ,WACnC,IAAImmB,EAAqBjZ,EAAUkZ,EAAOnR,EACtCtK,EAAQ3K,KACZ,OAAOiD,GAAYjD,MAAM,SAAUiP,GAC/B,OAAQA,EAAG1L,OACP,KAAK,EACD4iB,EAAsB,CAClBvO,QAASsO,EACTnmB,QAAS,CACL8X,YAAa,UAGrB5I,EAAG1L,MAAQ,EACf,KAAK,EAED,OADA0L,EAAGxL,KAAKQ,KAAK,CAAC,EAAG,EAAJ,CAAS,IACf,CAAC,EAAakU,GAAaV,KAAKzX,KAAKmU,QAASgS,IACzD,KAAK,EAED,OADAjZ,EAAW+B,EAAGzL,OACP,CAAC,EAAa,GACzB,KAAK,EAGD,OAFA4iB,EAAQnX,EAAGzL,OACXxD,KAAKwjB,SAAS4C,EAAO7M,GAAckK,aAC5B,CAAC,GACZ,KAAK,EAMD,OALAzjB,KAAK4hB,UAAYvI,GAAUwI,QAC3B5M,EAAc/H,EAAS+H,YACnB/H,EAASgJ,iBACTlW,KAAKsjB,aAAapW,EAASgJ,gBAAiBoD,GAAYgJ,MAC5DtiB,KAAKsjB,aAAapW,EAAStB,QAAS0N,GAAY+I,KACzC,CAAC,EAAariB,KAAKujB,cACjBpE,KAAKjS,EAAS+I,aACdjT,MAAK,WAEF2H,EAAMyW,oBACU,cAAhBnM,GACgB,WAAhBA,GACAtK,EAAMiX,YAAcvI,GAAUwI,SAC9BlX,EAAMqZ,qBAGTvG,OAAM,SAAUuC,GAAO,OAAOrV,EAAM6Y,SAASxD,EAAKzG,GAAckK,iBAC7E,KAAK,EAED,OADAxU,EAAGzL,OACI,CAAC,WAK5Bwd,EAAQjgB,UAAUuiB,aAAe,SAAU1L,EAASjC,GAChD3V,KAAK2hB,SAAWnI,GAAexZ,KAAK2hB,SAAU,CAC1C,CACI/J,QAASA,EACTjC,KAAMA,MAOlBqL,EAAQjgB,UAAUyiB,SAAW,SAAUjf,EAAOigB,GAC1C,IAAI5Y,EAA2B,kBAAVrH,EAAqBA,EAAQA,EAAMqH,QACxD5L,KAAK4hB,UAAYvI,GAAUzQ,MAC3B5I,KAAKuE,MAAQ,CAAEqH,QAASA,EAAS4Y,UAAWA,IAEhDxD,EAAQjgB,UAAU4iB,MAAQ,WACtB3jB,KAAK4hB,UAAYvI,GAAUwI,QAC3B7hB,KAAK6Q,KAAO,GACZ7Q,KAAKuE,WAAQmD,EACb1H,KAAK2hB,SAAW,GACZ3hB,KAAKqjB,gBACLrjB,KAAKsjB,aAAatjB,KAAKqjB,eAAgB/J,GAAY+I,KACvDriB,KAAKujB,eAAiBvjB,KAAKujB,cAAcrE,SAE7C8B,EAAQjgB,UAAUslB,mBAAqB,WACnC,IAAI1b,EAAQ3K,KAGZ,MAAO,EAFagiB,EAAAA,EAAAA,GAAE,SAAU,CAAE4C,OAAQ,QACtB5C,EAAAA,EAAAA,GAAE,iBAAkB,CAAE,YAAa,wBAAyBsE,kBAAmB,WAAc,OAAO3b,EAAM2Z,sBAAyBrC,MAAO,cAAesE,QAAS,OAAQC,KAAM,UAGxMxF,EAAQjgB,UAAU0lB,UAAY,WAC1B,IAAI9b,EAAQ3K,KACZ,GAAIA,KAAK4hB,YAAcvI,GAAU4K,UAC7B,OAAOjkB,KAAKqmB,qBAChB,IAAIK,EAAmB1mB,KAAKwhB,YACtBF,EAAAA,EAAAA,uBACAA,EAAAA,EAAAA,wBAMN,MAAO,EALUU,EAAAA,EAAAA,GAAE,gBAAiB,CAAE2E,YAAaC,EAAAA,EAAAA,IAASF,GAAmBG,YAAa,OAAQC,kBAAmB,SAAUC,GAAO,OAAOpc,EAAMyZ,iBAAiB2C,IAAStkB,MAAOzC,KAAK6Q,KAAMmW,SAAUhnB,KAAK4hB,YAAcvI,GAAUzQ,QAAU5I,KAAKwhB,cACvOxhB,KAAKuhB,eAAiBS,EAAAA,EAAAA,GAAE,iBAAkB,CAAE,YAAa,qBAAsBsE,kBAAmB,WAAc,OAAO3b,EAAMqZ,mBAAsB/B,MAAO,cAAesE,QAAS,OAAQC,KAAM,aAAcQ,SAAUhnB,KAAK4hB,YAAcvI,GAAUzQ,OAC7P5I,KAAK4hB,YAAcvI,GAAUwI,UACpB7hB,KAAKwhB,cAAgBQ,EAAAA,EAAAA,GAAE,iBAAkB,CAAE,YAAa,sBAAuBC,MAAO,cAAesE,QAAS,OAAQC,KAAM,OAAQF,kBAAmB,WAAc,OAAO3b,EAAMgY,mBAAsBqE,SAAUhnB,KAAK4hB,YAAcvI,GAAUzQ,OACxP5I,KAAK4hB,YAAcvI,GAAUwI,YAGzCb,EAAQjgB,UAAUkmB,WAAa,WAC3B,IAAItc,EAAQ3K,KACZ,GAAKA,KAAKuE,MAAV,CAEA,IAAI0K,EAAKjP,KAAKuE,MAAOqH,EAAUqD,EAAGrD,QAAS4Y,EAAYvV,EAAGuV,UAC1D,OAAQxC,EAAAA,EAAAA,GAAE,gBAAiB,CAAEpW,QAASgb,EAAAA,EAAAA,IAAShb,GAAUsb,YAAa,WAAc,OAAOvc,EAAM4Z,iBAAiBC,QAEtHxD,EAAQjgB,UAAUomB,OAAS,WACvB,IAAIxc,EAAQ3K,KACZ,OAAQgiB,EAAAA,EAAAA,GAAEoF,EAAAA,EAAM,MAAMpF,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,oBAAqBD,EAAAA,EAAAA,GAAE,OAAQ,CAAE7U,KAAM,WAAY6U,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,SAAU,YAAa,kBAAoB2E,EAAAA,EAAAA,IAAS5mB,KAAKqhB,aAAaW,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,OAAQ,YAAa,gBAAkBjiB,KAAK8hB,WAAW9hB,KAAK2hB,YAAYK,EAAAA,EAAAA,GAAE,OAAQ,CAAEqF,SAAU,SAAUzkB,GAAK,OAAO+H,EAAMkZ,aAAajhB,MAASof,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,SAAU,YAAa,kBAAoBjiB,KAAKymB,cAAezmB,KAAKinB,gBAE/a1mB,OAAO+mB,eAAetG,EAAQjgB,UAAW,UAAW,CAChDwmB,IAAK,WAAc,OAAOC,EAAAA,EAAAA,GAAWxnB,OACrCynB,YAAY,EACZC,cAAc,IAEX1G,EApSyB,GAsSpCD,GAAe4G,MA5TS","sources":["../node_modules/@aws-amplify/interactions/src/Providers/InteractionsProvider.ts","../node_modules/@aws-sdk/client-lex-runtime-service/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/client-lex-runtime-service/models/models_0.ts","../node_modules/@aws-sdk/client-lex-runtime-service/endpoints.ts","../node_modules/@aws-sdk/client-lex-runtime-service/runtimeConfig.shared.ts","../node_modules/@aws-sdk/client-lex-runtime-service/runtimeConfig.browser.ts","../node_modules/@aws-sdk/client-lex-runtime-service/LexRuntimeServiceClient.ts","../node_modules/@aws-sdk/client-lex-runtime-service/protocols/Aws_restJson1.ts","../node_modules/@aws-sdk/client-lex-runtime-service/commands/PostTextCommand.ts","../node_modules/@aws-sdk/client-lex-runtime-service/commands/PostContentCommand.ts","../node_modules/@aws-amplify/interactions/src/Providers/AWSLexProviderHelper/convert.ts","../node_modules/@aws-amplify/interactions/src/Providers/AWSLexProvider.ts","../node_modules/@aws-amplify/interactions/src/Interactions.ts","../node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-chatbot.entry.js"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tInteractionsProvider,\n\tInteractionsOptions,\n\tInteractionsResponse,\n} from '../types';\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('AbstractInteractionsProvider');\n\nexport abstract class AbstractInteractionsProvider\n\timplements InteractionsProvider {\n\tprotected _config: InteractionsOptions;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tthis._config = options;\n\t}\n\n\tconfigure(config: InteractionsOptions = {}): InteractionsOptions {\n\t\tthis._config = { ...this._config, ...config };\n\n\t\tlogger.debug(`configure ${this.getProviderName()}`, this._config);\n\n\t\treturn this.options;\n\t}\n\n\tgetCategory() {\n\t\treturn 'Interactions';\n\t}\n\n\tabstract getProviderName(): string;\n\n\tprotected get options(): InteractionsOptions {\n\t\treturn { ...this._config };\n\t}\n\n\tpublic abstract sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | Object\n\t): Promise<object>;\n\n\tpublic abstract onComplete(\n\t\tbotname: string,\n\t\tcallback: (err: any, confirmation: InteractionsResponse) => void\n\t);\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import {\n  SENSITIVE_STRING,\n  LazyJsonString as __LazyJsonString,\n  SmithyException as __SmithyException,\n} from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\nimport { Readable } from \"stream\";\n\n/**\n * <p>The length of time or number of turns that a context remains active.</p>\n */\nexport interface ActiveContextTimeToLive {\n  /**\n   * <p>The number of seconds that the context should be active after it is first sent in a\n   *         <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5\n   *       and 86,400 seconds (24 hours).</p>\n   */\n  timeToLiveInSeconds?: number;\n\n  /**\n   * <p>The number of conversation turns that the context should be active. A conversation turn is\n   *       one <code>PostContent</code> or <code>PostText</code> request and the corresponding response\n   *       from Amazon Lex.</p>\n   */\n  turnsToLive?: number;\n}\n\nexport namespace ActiveContextTimeToLive {\n  export const filterSensitiveLog = (obj: ActiveContextTimeToLive): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A context is a variable that contains information about the current state of the\n *       conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an\n *       intent is fulfilled, or it can be set at runtime using the <code>PutContent</code>,\n *         <code>PutText</code>, or <code>PutSession</code> operation.</p>\n */\nexport interface ActiveContext {\n  /**\n   * <p>The name of the context.</p>\n   */\n  name: string | undefined;\n\n  /**\n   * <p>The length of time or number of turns that a context remains active.</p>\n   */\n  timeToLive: ActiveContextTimeToLive | undefined;\n\n  /**\n   * <p>State variables for the current context. You can use these values as default values for\n   *       slots in subsequent events.</p>\n   */\n  parameters: { [key: string]: string } | undefined;\n}\n\nexport namespace ActiveContext {\n  export const filterSensitiveLog = (obj: ActiveContext): any => ({\n    ...obj,\n    ...(obj.parameters && { parameters: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p> Request validation failed, there is no usable message in the context, or the bot build\n *       failed, is still in progress, or contains unbuilt changes. </p>\n */\nexport interface BadRequestException extends __SmithyException, $MetadataBearer {\n  name: \"BadRequestException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace BadRequestException {\n  export const filterSensitiveLog = (obj: BadRequestException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> Two clients are using the same AWS account, Amazon Lex bot, and user ID. </p>\n */\nexport interface ConflictException extends __SmithyException, $MetadataBearer {\n  name: \"ConflictException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace ConflictException {\n  export const filterSensitiveLog = (obj: ConflictException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteSessionRequest {\n  /**\n   * <p>The name of the bot that contains the session data.</p>\n   */\n  botName: string | undefined;\n\n  /**\n   * <p>The alias in use for the bot that contains the session data.</p>\n   */\n  botAlias: string | undefined;\n\n  /**\n   * <p>The identifier of the user associated with the session data.</p>\n   */\n  userId: string | undefined;\n}\n\nexport namespace DeleteSessionRequest {\n  export const filterSensitiveLog = (obj: DeleteSessionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteSessionResponse {\n  /**\n   * <p>The name of the bot associated with the session data.</p>\n   */\n  botName?: string;\n\n  /**\n   * <p>The alias in use for the bot associated with the session data.</p>\n   */\n  botAlias?: string;\n\n  /**\n   * <p>The ID of the client application user.</p>\n   */\n  userId?: string;\n\n  /**\n   * <p>The unique identifier for the session.</p>\n   */\n  sessionId?: string;\n}\n\nexport namespace DeleteSessionResponse {\n  export const filterSensitiveLog = (obj: DeleteSessionResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Internal service error. Retry the call.</p>\n */\nexport interface InternalFailureException extends __SmithyException, $MetadataBearer {\n  name: \"InternalFailureException\";\n  $fault: \"server\";\n  message?: string;\n}\n\nexport namespace InternalFailureException {\n  export const filterSensitiveLog = (obj: InternalFailureException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Exceeded a limit.</p>\n */\nexport interface LimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"LimitExceededException\";\n  $fault: \"client\";\n  retryAfterSeconds?: string;\n  message?: string;\n}\n\nexport namespace LimitExceededException {\n  export const filterSensitiveLog = (obj: LimitExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The resource (such as the Amazon Lex bot or an alias) that is referred to is not\n *       found.</p>\n */\nexport interface NotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"NotFoundException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace NotFoundException {\n  export const filterSensitiveLog = (obj: NotFoundException): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetSessionRequest {\n  /**\n   * <p>The name of the bot that contains the session data.</p>\n   */\n  botName: string | undefined;\n\n  /**\n   * <p>The alias in use for the bot that contains the session data.</p>\n   */\n  botAlias: string | undefined;\n\n  /**\n   * <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation\n   *       with your bot. </p>\n   */\n  userId: string | undefined;\n\n  /**\n   * <p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code>\n   *       structure. </p>\n   *          <p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set\n   *       to that string are returned.</p>\n   */\n  checkpointLabelFilter?: string;\n}\n\nexport namespace GetSessionRequest {\n  export const filterSensitiveLog = (obj: GetSessionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum FulfillmentState {\n  FAILED = \"Failed\",\n  FULFILLED = \"Fulfilled\",\n  READY_FOR_FULFILLMENT = \"ReadyForFulfillment\",\n}\n\nexport enum MessageFormatType {\n  COMPOSITE = \"Composite\",\n  CUSTOM_PAYLOAD = \"CustomPayload\",\n  PLAIN_TEXT = \"PlainText\",\n  SSML = \"SSML\",\n}\n\nexport enum DialogActionType {\n  CLOSE = \"Close\",\n  CONFIRM_INTENT = \"ConfirmIntent\",\n  DELEGATE = \"Delegate\",\n  ELICIT_INTENT = \"ElicitIntent\",\n  ELICIT_SLOT = \"ElicitSlot\",\n}\n\n/**\n * <p>Describes the next action that the bot should take in its interaction with the user and\n *       provides information about the context in which the action takes place. Use the\n *         <code>DialogAction</code> data type to set the interaction to a specific state, or to return\n *       the interaction to a previous state.</p>\n */\nexport interface DialogAction {\n  /**\n   * <p>The next action that the bot should take in its interaction with the user. The possible\n   *       values are:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>ConfirmIntent</code> - The next action is asking the user if the intent is\n   *           complete and ready to be fulfilled. This is a yes/no question such as \"Place the\n   *           order?\"</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Close</code> - Indicates that the there will not be a response from the user.\n   *           For example, the statement \"Your order has been placed\" does not require a\n   *           response.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Delegate</code> - The next action is determined by Amazon Lex.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitIntent</code> - The next action is to determine the intent that the user\n   *           wants to fulfill.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitSlot</code> - The next action is to elicit a slot value from the\n   *           user.</p>\n   *             </li>\n   *          </ul>\n   */\n  type: DialogActionType | string | undefined;\n\n  /**\n   * <p>The name of the intent.</p>\n   */\n  intentName?: string;\n\n  /**\n   * <p>Map of the slots that have been gathered and their values. </p>\n   */\n  slots?: { [key: string]: string };\n\n  /**\n   * <p>The name of the slot that should be elicited from the user.</p>\n   */\n  slotToElicit?: string;\n\n  /**\n   * <p>The fulfillment state of the intent. The possible values are:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>Failed</code> - The Lambda function associated with the intent failed to fulfill\n   *           the intent.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated\n   *           with the intent. </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ReadyForFulfillment</code> - All of the information necessary for the intent is\n   *           present and the intent ready to be fulfilled by the client application.</p>\n   *             </li>\n   *          </ul>\n   */\n  fulfillmentState?: FulfillmentState | string;\n\n  /**\n   * <p>The message that should be shown to the user. If you don't specify a message, Amazon Lex will\n   *       use the message configured for the intent.</p>\n   */\n  message?: string;\n\n  /**\n   * <ul>\n   *             <li>\n   *                <p>\n   *                   <code>PlainText</code> - The message contains plain UTF-8 text.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>CustomPayload</code> - The message is a custom format for the client.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>SSML</code> - The message contains text formatted for voice output.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Composite</code> - The message contains an escaped JSON object containing one or\n   *           more messages. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\">Message\n   *             Groups</a>. </p>\n   *             </li>\n   *          </ul>\n   */\n  messageFormat?: MessageFormatType | string;\n}\n\nexport namespace DialogAction {\n  export const filterSensitiveLog = (obj: DialogAction): any => ({\n    ...obj,\n    ...(obj.slots && { slots: SENSITIVE_STRING }),\n    ...(obj.message && { message: SENSITIVE_STRING }),\n  });\n}\n\nexport enum ConfirmationStatus {\n  CONFIRMED = \"Confirmed\",\n  DENIED = \"Denied\",\n  NONE = \"None\",\n}\n\n/**\n * <p>Provides information about the state of an intent. You can use this information to get the\n *       current state of an intent so that you can process the intent, or so that you can return the\n *       intent to its previous state.</p>\n */\nexport interface IntentSummary {\n  /**\n   * <p>The name of the intent.</p>\n   */\n  intentName?: string;\n\n  /**\n   * <p>A user-defined label that identifies a particular intent. You can use this label to return\n   *       to a previous intent. </p>\n   *          <p>Use the <code>checkpointLabelFilter</code> parameter of the <code>GetSessionRequest</code>\n   *       operation to filter the intents returned by the operation to those with only the specified\n   *       label.</p>\n   */\n  checkpointLabel?: string;\n\n  /**\n   * <p>Map of the slots that have been gathered and their values. </p>\n   */\n  slots?: { [key: string]: string };\n\n  /**\n   * <p>The status of the intent after the user responds to the confirmation prompt. If the user\n   *       confirms the intent, Amazon Lex sets this field to <code>Confirmed</code>. If the user denies the\n   *       intent, Amazon Lex sets this value to <code>Denied</code>. The possible values are:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>Confirmed</code> - The user has responded \"Yes\" to the confirmation prompt,\n   *           confirming that the intent is complete and that it is ready to be fulfilled.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Denied</code> - The user has responded \"No\" to the confirmation prompt.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>None</code> - The user has never been prompted for confirmation; or, the user\n   *           was prompted but did not confirm or deny the prompt.</p>\n   *             </li>\n   *          </ul>\n   */\n  confirmationStatus?: ConfirmationStatus | string;\n\n  /**\n   * <p>The next action that the bot should take in its interaction with the user. The possible\n   *       values are:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>ConfirmIntent</code> - The next action is asking the user if the intent is\n   *           complete and ready to be fulfilled. This is a yes/no question such as \"Place the\n   *           order?\"</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Close</code> - Indicates that the there will not be a response from the user.\n   *           For example, the statement \"Your order has been placed\" does not require a\n   *           response.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitIntent</code> - The next action is to determine the intent that the user\n   *           wants to fulfill.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitSlot</code> - The next action is to elicit a slot value from the\n   *           user.</p>\n   *             </li>\n   *          </ul>\n   */\n  dialogActionType: DialogActionType | string | undefined;\n\n  /**\n   * <p>The fulfillment state of the intent. The possible values are:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>Failed</code> - The Lambda function associated with the intent failed to fulfill\n   *           the intent.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated\n   *           with the intent. </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ReadyForFulfillment</code> - All of the information necessary for the intent is\n   *           present and the intent ready to be fulfilled by the client application.</p>\n   *             </li>\n   *          </ul>\n   */\n  fulfillmentState?: FulfillmentState | string;\n\n  /**\n   * <p>The next slot to elicit from the user. If there is not slot to elicit, the field is\n   *       blank.</p>\n   */\n  slotToElicit?: string;\n}\n\nexport namespace IntentSummary {\n  export const filterSensitiveLog = (obj: IntentSummary): any => ({\n    ...obj,\n    ...(obj.slots && { slots: SENSITIVE_STRING }),\n  });\n}\n\nexport interface GetSessionResponse {\n  /**\n   * <p>An array of information about the intents used in the session. The array can contain a\n   *       maximum of three summaries. If more than three intents are used in the session, the\n   *         <code>recentIntentSummaryView</code> operation contains information about the last three\n   *       intents used.</p>\n   *          <p>If you set the <code>checkpointLabelFilter</code> parameter in the request, the array\n   *       contains only the intents with the specified label.</p>\n   */\n  recentIntentSummaryView?: IntentSummary[];\n\n  /**\n   * <p>Map of key/value pairs representing the session-specific context information. It contains\n   *       application information passed between Amazon Lex and a client application.</p>\n   */\n  sessionAttributes?: { [key: string]: string };\n\n  /**\n   * <p>A unique identifier for the session.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>Describes the current state of the bot.</p>\n   */\n  dialogAction?: DialogAction;\n\n  /**\n   * <p>A list of active contexts for the session. A context can be set when an intent\n   *     is fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>,\n   *     or <code>PutSession</code> operation.</p>\n   *          <p>You can use a context to control the intents that can follow up an intent,\n   *     or to modify the operation of your application.</p>\n   */\n  activeContexts?: ActiveContext[];\n}\n\nexport namespace GetSessionResponse {\n  export const filterSensitiveLog = (obj: GetSessionResponse): any => ({\n    ...obj,\n    ...(obj.recentIntentSummaryView && {\n      recentIntentSummaryView: obj.recentIntentSummaryView.map((item) => IntentSummary.filterSensitiveLog(item)),\n    }),\n    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),\n    ...(obj.dialogAction && { dialogAction: DialogAction.filterSensitiveLog(obj.dialogAction) }),\n    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Either the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly,\n *       AWS Lambda) failed with an internal service error.</p>\n */\nexport interface BadGatewayException extends __SmithyException, $MetadataBearer {\n  name: \"BadGatewayException\";\n  $fault: \"server\";\n  Message?: string;\n}\n\nexport namespace BadGatewayException {\n  export const filterSensitiveLog = (obj: BadGatewayException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception. For example, </p>\n *          <ul>\n *             <li>\n *                <p>If Amazon Lex does not have sufficient permissions to call a Lambda function.</p>\n *             </li>\n *             <li>\n *                <p>If a Lambda function takes longer than 30 seconds to execute.</p>\n *             </li>\n *             <li>\n *                <p>If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without\n *           removing any slot values.</p>\n *             </li>\n *          </ul>\n */\nexport interface DependencyFailedException extends __SmithyException, $MetadataBearer {\n  name: \"DependencyFailedException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace DependencyFailedException {\n  export const filterSensitiveLog = (obj: DependencyFailedException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>This exception is not used.</p>\n */\nexport interface LoopDetectedException extends __SmithyException, $MetadataBearer {\n  name: \"LoopDetectedException\";\n  $fault: \"server\";\n  Message?: string;\n}\n\nexport namespace LoopDetectedException {\n  export const filterSensitiveLog = (obj: LoopDetectedException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The accept header in the request does not have a valid value.</p>\n */\nexport interface NotAcceptableException extends __SmithyException, $MetadataBearer {\n  name: \"NotAcceptableException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace NotAcceptableException {\n  export const filterSensitiveLog = (obj: NotAcceptableException): any => ({\n    ...obj,\n  });\n}\n\nexport interface PostContentRequest {\n  /**\n   * <p>Name of the Amazon Lex bot.</p>\n   */\n  botName: string | undefined;\n\n  /**\n   * <p>Alias of the Amazon Lex bot.</p>\n   */\n  botAlias: string | undefined;\n\n  /**\n   * <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation\n   *       with your bot. At runtime, each request must contain the <code>userID</code> field.</p>\n   *          <p>To decide the user ID to use for your application, consider the following factors.</p>\n   *          <ul>\n   *             <li>\n   *                <p>The <code>userID</code> field must not contain any personally identifiable information\n   *           of the user, for example, name, personal identification numbers, or other end user\n   *           personal information.</p>\n   *             </li>\n   *             <li>\n   *                <p>If you want a user to start a conversation on one device and continue on another\n   *           device, use a user-specific identifier.</p>\n   *             </li>\n   *             <li>\n   *                <p>If you want the same user to be able to have two independent conversations on two\n   *           different devices, choose a device-specific identifier.</p>\n   *             </li>\n   *             <li>\n   *                <p>A user can't have two independent conversations with two different versions of the\n   *           same bot. For example, a user can't have a conversation with the PROD and BETA versions of\n   *           the same bot. If you anticipate that a user will need to have conversation with two\n   *           different versions, for example, while testing, include the bot alias in the user ID to\n   *           separate the two conversations.</p>\n   *             </li>\n   *          </ul>\n   */\n  userId: string | undefined;\n\n  /**\n   * <p>You pass this value as the <code>x-amz-lex-session-attributes</code> HTTP header.</p>\n   *          <p>Application-specific information passed between Amazon Lex and a client application. The value\n   *       must be a JSON serialized and base64 encoded map with string keys and values. The total size\n   *       of the <code>sessionAttributes</code> and <code>requestAttributes</code> headers is limited to\n   *       12 KB.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session\n   *         Attributes</a>.</p>\n   */\n  sessionAttributes?: __LazyJsonString | string;\n\n  /**\n   * <p>You pass this value as the <code>x-amz-lex-request-attributes</code> HTTP header.</p>\n   *          <p>Request-specific information passed between Amazon Lex and a client application. The value must\n   *       be a JSON serialized and base64 encoded map with string keys and values. The total size of the\n   *         <code>requestAttributes</code> and <code>sessionAttributes</code> headers is limited to 12\n   *       KB.</p>\n   *          <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any\n   *       request attributes with the prefix <code>x-amz-lex:</code>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request\n   *         Attributes</a>.</p>\n   */\n  requestAttributes?: __LazyJsonString | string;\n\n  /**\n   * <p> You pass this value as the <code>Content-Type</code> HTTP header. </p>\n   *          <p> Indicates the audio format or text. The header value must start with one of the following\n   *       prefixes: </p>\n   *          <ul>\n   *             <li>\n   *                <p>PCM format, audio data must be in little-endian byte order.</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>audio/l16; rate=16000; channels=1</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/x-l16; sample-rate=16000; channel-count=1</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1;\n   *               is-big-endian=false </p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <p>Opus format</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>audio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=256000;\n   *               frame-size-milliseconds=4</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <p>Text format</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>text/plain; charset=utf-8</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *          </ul>\n   */\n  contentType: string | undefined;\n\n  /**\n   * <p> You pass this value as the <code>Accept</code> HTTP header. </p>\n   *          <p> The message Amazon Lex returns in the response can be either text or speech based on the\n   *         <code>Accept</code> HTTP header value in the request. </p>\n   *          <ul>\n   *             <li>\n   *                <p> If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in the\n   *           response. </p>\n   *             </li>\n   *             <li>\n   *                <p> If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response.\n   *           Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the\n   *             <code>Accept</code> header). For example, if you specify <code>audio/mpeg</code> as the\n   *           value, Amazon Lex returns speech in the MPEG format.</p>\n   *             </li>\n   *             <li>\n   *                <p>If the value is <code>audio/pcm</code>, the speech returned is <code>audio/pcm</code>\n   *           in 16-bit, little endian format.\n   *           </p>\n   *             </li>\n   *             <li>\n   *                <p>The following are the accepted values:</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>audio/mpeg</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/ogg</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/pcm</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>text/plain; charset=utf-8</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/* (defaults to mpeg)</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *          </ul>\n   */\n  accept?: string;\n\n  /**\n   * <p> User input in PCM or Opus audio format or text format as described in the\n   *         <code>Content-Type</code> HTTP header. </p>\n   *          <p>You can stream audio data to Amazon Lex or you can create a local buffer that captures all of\n   *       the audio data before sending. In general, you get better performance if you stream audio data\n   *       rather than buffering the data locally.</p>\n   */\n  inputStream: Readable | ReadableStream | Blob | undefined;\n\n  /**\n   * <p>A list of contexts active for the request. A context can be activated when a previous\n   *       intent is fulfilled, or by including the context in the request,</p>\n   *          <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for\n   *       the session. If you specify an empty list, all contexts for the session are cleared.</p>\n   */\n  activeContexts?: __LazyJsonString | string;\n}\n\nexport namespace PostContentRequest {\n  export const filterSensitiveLog = (obj: PostContentRequest): any => ({\n    ...obj,\n    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),\n    ...(obj.requestAttributes && { requestAttributes: SENSITIVE_STRING }),\n    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),\n  });\n}\n\nexport enum DialogState {\n  CONFIRM_INTENT = \"ConfirmIntent\",\n  ELICIT_INTENT = \"ElicitIntent\",\n  ELICIT_SLOT = \"ElicitSlot\",\n  FAILED = \"Failed\",\n  FULFILLED = \"Fulfilled\",\n  READY_FOR_FULFILLMENT = \"ReadyForFulfillment\",\n}\n\nexport interface PostContentResponse {\n  /**\n   * <p>Content type as specified in the <code>Accept</code> HTTP header in the request.</p>\n   */\n  contentType?: string;\n\n  /**\n   * <p>Current user intent that Amazon Lex is aware of.</p>\n   */\n  intentName?: string;\n\n  /**\n   * <p>Provides a score that indicates how confident Amazon Lex is that the returned intent is the one\n   *       that matches the user's intent. The score is between 0.0 and 1.0.</p>\n   *          <p>The score is a relative score, not an absolute score. The score may change based on\n   *       improvements to Amazon Lex. </p>\n   */\n  nluIntentConfidence?: __LazyJsonString | string;\n\n  /**\n   * <p>One to four alternative intents that may be applicable to the user's intent.</p>\n   *          <p>Each alternative includes a score that indicates how confident Amazon Lex is that the intent\n   *       matches the user's intent. The intents are sorted by the confidence score.</p>\n   */\n  alternativeIntents?: __LazyJsonString | string;\n\n  /**\n   * <p>Map of zero or more intent slots (name/value pairs) Amazon Lex detected from the user input\n   *       during the conversation. The field is base-64 encoded.</p>\n   *          <p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it\n   *       returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type\n   *       was created or updated. If <code>valueSelectionStrategy</code> is set to\n   *         <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value\n   *       is similar to the slot values. If <code>valueSelectionStrategy</code> is set to\n   *         <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if\n   *       there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>,\n   *       the default is <code>ORIGINAL_VALUE</code>.</p>\n   */\n  slots?: __LazyJsonString | string;\n\n  /**\n   * <p> Map of key/value pairs representing the session-specific context information. </p>\n   */\n  sessionAttributes?: __LazyJsonString | string;\n\n  /**\n   * <p>The sentiment expressed in an utterance.</p>\n   *          <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis,\n   *       this field contains the result of the analysis.</p>\n   */\n  sentimentResponse?: string;\n\n  /**\n   * <p>The message to convey to the user. The message can come from the bot's configuration or\n   *       from a Lambda function.</p>\n   *          <p>If the intent is not configured with a Lambda function, or if the Lambda function returned\n   *         <code>Delegate</code> as the <code>dialogAction.type</code> in its response, Amazon Lex decides\n   *       on the next course of action and selects an appropriate message from the bot's configuration\n   *       based on the current interaction context. For example, if Amazon Lex isn't able to understand user\n   *       input, it uses a clarification prompt message.</p>\n   *          <p>When you create an intent you can assign messages to groups. When messages are assigned to\n   *       groups Amazon Lex returns one message from each group in the response. The message field is an\n   *       escaped JSON string containing the messages. For more information about the structure of the\n   *       JSON string returned, see <a>msg-prompts-formats</a>.</p>\n   *          <p>If the Lambda function returns a message, Amazon Lex passes it to the client in its\n   *       response.</p>\n   */\n  message?: string;\n\n  /**\n   * <p>The format of the response message. One of the following values:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>PlainText</code> - The message contains plain UTF-8 text.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>CustomPayload</code> - The message is a custom format for the client.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>SSML</code> - The message contains text formatted for voice output.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Composite</code> - The message contains an escaped JSON object containing one or\n   *           more messages from the groups that messages were assigned to when the intent was\n   *           created.</p>\n   *             </li>\n   *          </ul>\n   */\n  messageFormat?: MessageFormatType | string;\n\n  /**\n   * <p>Identifies the current state of the user interaction. Amazon Lex returns one of the following\n   *       values as <code>dialogState</code>. The client can optionally use this information to\n   *       customize the user interface. </p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent. Consider the\n   *           following examples: </p>\n   *                <p> For example, a user might utter an intent (\"I want to order a pizza\"). If Amazon Lex\n   *           cannot infer the user intent from this utterance, it will return this dialog state.\n   *         </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ConfirmIntent</code> - Amazon Lex is expecting a \"yes\" or \"no\" response. </p>\n   *                <p>For example, Amazon Lex wants user confirmation before fulfilling an intent. Instead of a\n   *           simple \"yes\" or \"no\" response, a user might respond with additional information. For\n   *           example, \"yes, but make it a thick crust pizza\" or \"no, I want to order a drink.\" Amazon Lex\n   *           can process such additional information (in these examples, update the crust type slot or\n   *           change the intent from OrderPizza to OrderDrink). </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for the current intent. </p>\n   *                <p> For example, suppose that in the response Amazon Lex sends this message: \"What size pizza\n   *           would you like?\". A user might reply with the slot value (e.g., \"medium\"). The user might\n   *           also provide additional information in the response (e.g., \"medium thick crust pizza\").\n   *           Amazon Lex can process such additional information appropriately. </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Fulfilled</code> - Conveys that the Lambda function has successfully fulfilled the\n   *           intent. </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the request.\n   *         </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Failed</code> - Conveys that the conversation with the user failed. </p>\n   *                <p> This can happen for various reasons, including that the user does not provide an\n   *           appropriate response to prompts from the service (you can configure how many times Amazon Lex\n   *           can prompt a user for specific information), or if the Lambda function fails to fulfill the\n   *           intent. </p>\n   *             </li>\n   *          </ul>\n   */\n  dialogState?: DialogState | string;\n\n  /**\n   * <p> If the <code>dialogState</code> value is <code>ElicitSlot</code>, returns the name of the\n   *       slot for which Amazon Lex is eliciting a value. </p>\n   */\n  slotToElicit?: string;\n\n  /**\n   * <p>The text used to process the request.</p>\n   *          <p>If the input was an audio stream, the <code>inputTranscript</code> field contains the text\n   *       extracted from the audio stream. This is the text that is actually processed to recognize\n   *       intents and slot values. You can use this information to determine if Amazon Lex is correctly\n   *       processing the audio that you send.</p>\n   */\n  inputTranscript?: string;\n\n  /**\n   * <p>The prompt (or statement) to convey to the user. This is based on the bot configuration\n   *       and context. For example, if Amazon Lex did not understand the user intent, it sends the\n   *         <code>clarificationPrompt</code> configured for the bot. If the intent requires confirmation\n   *       before taking the fulfillment action, it sends the <code>confirmationPrompt</code>. Another\n   *       example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message\n   *       to convey to the user. Then Amazon Lex sends that message in the response. </p>\n   */\n  audioStream?: Readable | ReadableStream | Blob;\n\n  /**\n   * <p>The version of the bot that responded to the conversation. You can use this information to\n   *       help determine if one version of a bot is performing better than another version.</p>\n   */\n  botVersion?: string;\n\n  /**\n   * <p>The unique identifier for the session.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>A list of active contexts for the session. A context can be set when an intent\n   *       is fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>,\n   *       or <code>PutSession</code> operation.</p>\n   *          <p>You can use a context to control the intents that can follow up an intent,\n   *       or to modify the operation of your application.</p>\n   */\n  activeContexts?: __LazyJsonString | string;\n}\n\nexport namespace PostContentResponse {\n  export const filterSensitiveLog = (obj: PostContentResponse): any => ({\n    ...obj,\n    ...(obj.message && { message: SENSITIVE_STRING }),\n    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>The input speech is too long.</p>\n */\nexport interface RequestTimeoutException extends __SmithyException, $MetadataBearer {\n  name: \"RequestTimeoutException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace RequestTimeoutException {\n  export const filterSensitiveLog = (obj: RequestTimeoutException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The Content-Type header (<code>PostContent</code> API) has an invalid value. </p>\n */\nexport interface UnsupportedMediaTypeException extends __SmithyException, $MetadataBearer {\n  name: \"UnsupportedMediaTypeException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace UnsupportedMediaTypeException {\n  export const filterSensitiveLog = (obj: UnsupportedMediaTypeException): any => ({\n    ...obj,\n  });\n}\n\nexport interface PostTextRequest {\n  /**\n   * <p>The name of the Amazon Lex bot.</p>\n   */\n  botName: string | undefined;\n\n  /**\n   * <p>The alias of the Amazon Lex bot.</p>\n   */\n  botAlias: string | undefined;\n\n  /**\n   * <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation\n   *       with your bot. At runtime, each request must contain the <code>userID</code> field.</p>\n   *          <p>To decide the user ID to use for your application, consider the following factors.</p>\n   *          <ul>\n   *             <li>\n   *                <p>The <code>userID</code> field must not contain any personally identifiable information\n   *           of the user, for example, name, personal identification numbers, or other end user\n   *           personal information.</p>\n   *             </li>\n   *             <li>\n   *                <p>If you want a user to start a conversation on one device and continue on another\n   *           device, use a user-specific identifier.</p>\n   *             </li>\n   *             <li>\n   *                <p>If you want the same user to be able to have two independent conversations on two\n   *           different devices, choose a device-specific identifier.</p>\n   *             </li>\n   *             <li>\n   *                <p>A user can't have two independent conversations with two different versions of the\n   *           same bot. For example, a user can't have a conversation with the PROD and BETA versions of\n   *           the same bot. If you anticipate that a user will need to have conversation with two\n   *           different versions, for example, while testing, include the bot alias in the user ID to\n   *           separate the two conversations.</p>\n   *             </li>\n   *          </ul>\n   */\n  userId: string | undefined;\n\n  /**\n   * <p>Application-specific information passed between Amazon Lex and a client application.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session\n   *         Attributes</a>.</p>\n   */\n  sessionAttributes?: { [key: string]: string };\n\n  /**\n   * <p>Request-specific information passed between Amazon Lex and a client application.</p>\n   *          <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any\n   *       request attributes with the prefix <code>x-amz-lex:</code>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request\n   *         Attributes</a>.</p>\n   */\n  requestAttributes?: { [key: string]: string };\n\n  /**\n   * <p>The text that the user entered (Amazon Lex interprets this text).</p>\n   */\n  inputText: string | undefined;\n\n  /**\n   * <p>A list of contexts active for the request. A context can be activated when a previous\n   *       intent is fulfilled, or by including the context in the request,</p>\n   *          <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for\n   *       the session. If you specify an empty list, all contexts for the session are cleared.</p>\n   */\n  activeContexts?: ActiveContext[];\n}\n\nexport namespace PostTextRequest {\n  export const filterSensitiveLog = (obj: PostTextRequest): any => ({\n    ...obj,\n    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),\n    ...(obj.requestAttributes && { requestAttributes: SENSITIVE_STRING }),\n    ...(obj.inputText && { inputText: SENSITIVE_STRING }),\n    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Provides a score that indicates the confidence that Amazon Lex has that an intent is the one\n *       that satisfies the user's intent.</p>\n */\nexport interface IntentConfidence {\n  /**\n   * <p>A score that indicates how confident Amazon Lex is that an intent satisfies the user's intent.\n   *       Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.</p>\n   */\n  score?: number;\n}\n\nexport namespace IntentConfidence {\n  export const filterSensitiveLog = (obj: IntentConfidence): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An intent that Amazon Lex suggests satisfies the user's intent. Includes the name of the\n *       intent, the confidence that Amazon Lex has that the user's intent is satisfied, and the slots\n *       defined for the intent.</p>\n */\nexport interface PredictedIntent {\n  /**\n   * <p>The name of the intent that Amazon Lex suggests satisfies the user's intent.</p>\n   */\n  intentName?: string;\n\n  /**\n   * <p>Indicates how confident Amazon Lex is that an intent satisfies the user's intent.</p>\n   */\n  nluIntentConfidence?: IntentConfidence;\n\n  /**\n   * <p>The slot and slot values associated with the predicted intent.</p>\n   */\n  slots?: { [key: string]: string };\n}\n\nexport namespace PredictedIntent {\n  export const filterSensitiveLog = (obj: PredictedIntent): any => ({\n    ...obj,\n    ...(obj.slots && { slots: SENSITIVE_STRING }),\n  });\n}\n\nexport enum ContentType {\n  GENERIC = \"application/vnd.amazonaws.card.generic\",\n}\n\n/**\n * <p>Represents an option to be shown on the client platform (Facebook, Slack, etc.)</p>\n */\nexport interface Button {\n  /**\n   * <p>Text that is visible to the user on the button.</p>\n   */\n  text: string | undefined;\n\n  /**\n   * <p>The value sent to Amazon Lex when a user chooses the button. For example, consider button\n   *       text \"NYC.\" When the user chooses the button, the value sent can be \"New York City.\"</p>\n   */\n  value: string | undefined;\n}\n\nexport namespace Button {\n  export const filterSensitiveLog = (obj: Button): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents an option rendered to the user when a prompt is shown. It could be an image, a\n *       button, a link, or text. </p>\n */\nexport interface GenericAttachment {\n  /**\n   * <p>The title of the option.</p>\n   */\n  title?: string;\n\n  /**\n   * <p>The subtitle shown below the title.</p>\n   */\n  subTitle?: string;\n\n  /**\n   * <p>The URL of an attachment to the response card.</p>\n   */\n  attachmentLinkUrl?: string;\n\n  /**\n   * <p>The URL of an image that is displayed to the user.</p>\n   */\n  imageUrl?: string;\n\n  /**\n   * <p>The list of options to show to the user.</p>\n   */\n  buttons?: Button[];\n}\n\nexport namespace GenericAttachment {\n  export const filterSensitiveLog = (obj: GenericAttachment): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>If you configure a response card when creating your bots, Amazon Lex substitutes the session\n *       attributes and slot values that are available, and then returns it. The response card can also\n *       come from a Lambda function ( <code>dialogCodeHook</code> and <code>fulfillmentActivity</code>\n *       on an intent).</p>\n */\nexport interface ResponseCard {\n  /**\n   * <p>The version of the response card format.</p>\n   */\n  version?: string;\n\n  /**\n   * <p>The content type of the response.</p>\n   */\n  contentType?: ContentType | string;\n\n  /**\n   * <p>An array of attachment objects representing options.</p>\n   */\n  genericAttachments?: GenericAttachment[];\n}\n\nexport namespace ResponseCard {\n  export const filterSensitiveLog = (obj: ResponseCard): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The sentiment expressed in an utterance.</p>\n *          <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis,\n *       this field structure contains the result of the analysis.</p>\n */\nexport interface SentimentResponse {\n  /**\n   * <p>The inferred sentiment that Amazon Comprehend has the highest confidence in.</p>\n   */\n  sentimentLabel?: string;\n\n  /**\n   * <p>The likelihood that the sentiment was correctly inferred.</p>\n   */\n  sentimentScore?: string;\n}\n\nexport namespace SentimentResponse {\n  export const filterSensitiveLog = (obj: SentimentResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface PostTextResponse {\n  /**\n   * <p>The current user intent that Amazon Lex is aware of.</p>\n   */\n  intentName?: string;\n\n  /**\n   * <p>Provides a score that indicates how confident Amazon Lex is that the returned intent is the one\n   *       that matches the user's intent. The score is between 0.0 and 1.0. For more information, see\n   *         <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\">Confidence\n   *         Scores</a>.</p>\n   *          <p>The score is a relative score, not an absolute score. The score may change based on\n   *       improvements to Amazon Lex.</p>\n   */\n  nluIntentConfidence?: IntentConfidence;\n\n  /**\n   * <p>One to four alternative intents that may be applicable to the user's intent.</p>\n   *          <p>Each alternative includes a score that indicates how confident Amazon Lex is that the intent\n   *       matches the user's intent. The intents are sorted by the confidence score.</p>\n   */\n  alternativeIntents?: PredictedIntent[];\n\n  /**\n   * <p> The intent slots that Amazon Lex detected from the user input in the conversation. </p>\n   *          <p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it\n   *       returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type\n   *       was created or updated. If <code>valueSelectionStrategy</code> is set to\n   *         <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value\n   *       is similar to the slot values. If <code>valueSelectionStrategy</code> is set to\n   *         <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if\n   *       there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>,\n   *       the default is <code>ORIGINAL_VALUE</code>.</p>\n   */\n  slots?: { [key: string]: string };\n\n  /**\n   * <p>A map of key-value pairs representing the session-specific context information.</p>\n   */\n  sessionAttributes?: { [key: string]: string };\n\n  /**\n   * <p>The message to convey to the user. The message can come from the bot's configuration or\n   *       from a Lambda function.</p>\n   *          <p>If the intent is not configured with a Lambda function, or if the Lambda function returned\n   *         <code>Delegate</code> as the <code>dialogAction.type</code> its response, Amazon Lex decides on\n   *       the next course of action and selects an appropriate message from the bot's configuration\n   *       based on the current interaction context. For example, if Amazon Lex isn't able to understand user\n   *       input, it uses a clarification prompt message.</p>\n   *          <p>When you create an intent you can assign messages to groups. When messages are assigned to\n   *       groups Amazon Lex returns one message from each group in the response. The message field is an\n   *       escaped JSON string containing the messages. For more information about the structure of the\n   *       JSON string returned, see <a>msg-prompts-formats</a>.</p>\n   *          <p>If the Lambda function returns a message, Amazon Lex passes it to the client in its\n   *       response.</p>\n   */\n  message?: string;\n\n  /**\n   * <p>The sentiment expressed in and utterance.</p>\n   *          <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis,\n   *       this field contains the result of the analysis.</p>\n   */\n  sentimentResponse?: SentimentResponse;\n\n  /**\n   * <p>The format of the response message. One of the following values:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>PlainText</code> - The message contains plain UTF-8 text.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>CustomPayload</code> - The message is a custom format defined by the Lambda\n   *           function.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>SSML</code> - The message contains text formatted for voice output.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Composite</code> - The message contains an escaped JSON object containing one or\n   *           more messages from the groups that messages were assigned to when the intent was\n   *           created.</p>\n   *             </li>\n   *          </ul>\n   */\n  messageFormat?: MessageFormatType | string;\n\n  /**\n   * <p> Identifies the current state of the user interaction. Amazon Lex returns one of the following\n   *       values as <code>dialogState</code>. The client can optionally use this information to\n   *       customize the user interface. </p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitIntent</code> - Amazon Lex wants to elicit user intent. </p>\n   *                <p>For example, a user might utter an intent (\"I want to order a pizza\"). If Amazon Lex cannot\n   *           infer the user intent from this utterance, it will return this dialogState.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ConfirmIntent</code> - Amazon Lex is expecting a \"yes\" or \"no\" response. </p>\n   *                <p> For example, Amazon Lex wants user confirmation before fulfilling an intent. </p>\n   *                <p>Instead of a simple \"yes\" or \"no,\" a user might respond with additional information.\n   *           For example, \"yes, but make it thick crust pizza\" or \"no, I want to order a drink\".\n   *           Amazon Lex can process such additional information (in these examples, update the crust\n   *           type slot value, or change intent from OrderPizza to OrderDrink).</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitSlot</code> - Amazon Lex is expecting a slot value for the current intent. </p>\n   *                <p>For example, suppose that in the response Amazon Lex sends this message: \"What size pizza\n   *           would you like?\". A user might reply with the slot value (e.g., \"medium\"). The user might\n   *           also provide additional information in the response (e.g., \"medium thick crust pizza\").\n   *           Amazon Lex can process such additional information appropriately. </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Fulfilled</code> - Conveys that the Lambda function configured for the intent has\n   *           successfully fulfilled the intent. </p>\n   *\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the intent.\n   *         </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Failed</code> - Conveys that the conversation with the user failed. </p>\n   *                <p> This can happen for various reasons including that the user did not provide an\n   *           appropriate response to prompts from the service (you can configure how many times Amazon Lex\n   *           can prompt a user for specific information), or the Lambda function failed to fulfill the\n   *           intent. </p>\n   *             </li>\n   *          </ul>\n   */\n  dialogState?: DialogState | string;\n\n  /**\n   * <p>If the <code>dialogState</code> value is <code>ElicitSlot</code>, returns the name of the\n   *       slot for which Amazon Lex is eliciting a value. </p>\n   */\n  slotToElicit?: string;\n\n  /**\n   * <p>Represents the options that the user has to respond to the current prompt. Response Card\n   *       can come from the bot configuration (in the Amazon Lex console, choose the settings button next\n   *       to a slot) or from a code hook (Lambda function). </p>\n   */\n  responseCard?: ResponseCard;\n\n  /**\n   * <p>A unique identifier for the session.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>The version of the bot that responded to the conversation. You can use this information to\n   *       help determine if one version of a bot is performing better than another version.</p>\n   */\n  botVersion?: string;\n\n  /**\n   * <p>A list of active contexts for the session. A context can be set when an intent\n   *       is fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>,\n   *       or <code>PutSession</code> operation.</p>\n   *          <p>You can use a context to control the intents that can follow up an intent,\n   *       or to modify the operation of your application.</p>\n   */\n  activeContexts?: ActiveContext[];\n}\n\nexport namespace PostTextResponse {\n  export const filterSensitiveLog = (obj: PostTextResponse): any => ({\n    ...obj,\n    ...(obj.alternativeIntents && {\n      alternativeIntents: obj.alternativeIntents.map((item) => PredictedIntent.filterSensitiveLog(item)),\n    }),\n    ...(obj.slots && { slots: SENSITIVE_STRING }),\n    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),\n    ...(obj.message && { message: SENSITIVE_STRING }),\n    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),\n  });\n}\n\nexport interface PutSessionRequest {\n  /**\n   * <p>The name of the bot that contains the session data.</p>\n   */\n  botName: string | undefined;\n\n  /**\n   * <p>The alias in use for the bot that contains the session data.</p>\n   */\n  botAlias: string | undefined;\n\n  /**\n   * <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation\n   *       with your bot. </p>\n   */\n  userId: string | undefined;\n\n  /**\n   * <p>Map of key/value pairs representing the session-specific context information. It contains\n   *       application information passed between Amazon Lex and a client application.</p>\n   */\n  sessionAttributes?: { [key: string]: string };\n\n  /**\n   * <p>Sets the next action that the bot should take to fulfill the conversation.</p>\n   */\n  dialogAction?: DialogAction;\n\n  /**\n   * <p>A summary of the recent intents for the bot. You can use the intent summary view to set a\n   *       checkpoint label on an intent and modify attributes of intents. You can also use it to remove\n   *       or add intent summary objects to the list.</p>\n   *          <p>An intent that you modify or add to the list must make sense for the bot. For example, the\n   *       intent name must be valid for the bot. You must provide valid values for:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>intentName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>slot names</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>slotToElict</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   *          <p>If you send the <code>recentIntentSummaryView</code> parameter in a\n   *         <code>PutSession</code> request, the contents of the new summary view replaces the old\n   *       summary view. For example, if a <code>GetSession</code> request returns three intents in the\n   *       summary view and you call <code>PutSession</code> with one intent in the summary view, the\n   *       next call to <code>GetSession</code> will only return one intent.</p>\n   */\n  recentIntentSummaryView?: IntentSummary[];\n\n  /**\n   * <p>The message that Amazon Lex returns in the response can be either text or speech based\n   *       depending on the value of this field.</p>\n   *          <ul>\n   *             <li>\n   *                <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in the\n   *           response.</p>\n   *             </li>\n   *             <li>\n   *                <p>If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response.\n   *           Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For\n   *           example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the\n   *           MPEG format.</p>\n   *             </li>\n   *             <li>\n   *                <p>If the value is <code>audio/pcm</code>, the speech is returned as\n   *             <code>audio/pcm</code> in 16-bit, little endian format.</p>\n   *             </li>\n   *             <li>\n   *                <p>The following are the accepted values:</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <code>audio/mpeg</code>\n   *                      </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>audio/ogg</code>\n   *                      </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>audio/pcm</code>\n   *                      </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>audio/*</code> (defaults to mpeg)</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>text/plain; charset=utf-8</code>\n   *                      </p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *          </ul>\n   */\n  accept?: string;\n\n  /**\n   * <p>A list of contexts active for the request. A context can be activated when a previous\n   *       intent is fulfilled, or by including the context in the request,</p>\n   *          <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for\n   *       the session. If you specify an empty list, all contexts for the session are cleared.</p>\n   */\n  activeContexts?: ActiveContext[];\n}\n\nexport namespace PutSessionRequest {\n  export const filterSensitiveLog = (obj: PutSessionRequest): any => ({\n    ...obj,\n    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),\n    ...(obj.dialogAction && { dialogAction: DialogAction.filterSensitiveLog(obj.dialogAction) }),\n    ...(obj.recentIntentSummaryView && {\n      recentIntentSummaryView: obj.recentIntentSummaryView.map((item) => IntentSummary.filterSensitiveLog(item)),\n    }),\n    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),\n  });\n}\n\nexport interface PutSessionResponse {\n  /**\n   * <p>Content type as specified in the <code>Accept</code> HTTP header in the request.</p>\n   */\n  contentType?: string;\n\n  /**\n   * <p>The name of the current intent.</p>\n   */\n  intentName?: string;\n\n  /**\n   * <p>Map of zero or more intent slots Amazon Lex detected from the user input during the\n   *       conversation.</p>\n   *          <p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it\n   *       returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type\n   *       was created or updated. If <code>valueSelectionStrategy</code> is set to\n   *         <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value\n   *       is similar to the slot values. If <code>valueSelectionStrategy</code> is set to\n   *         <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if\n   *       there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>\n   *       the default is <code>ORIGINAL_VALUE</code>. </p>\n   */\n  slots?: __LazyJsonString | string;\n\n  /**\n   * <p>Map of key/value pairs representing session-specific context information.</p>\n   */\n  sessionAttributes?: __LazyJsonString | string;\n\n  /**\n   * <p>The next message that should be presented to the user.</p>\n   */\n  message?: string;\n\n  /**\n   * <p>The format of the response message. One of the following values:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>PlainText</code> - The message contains plain UTF-8 text.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>CustomPayload</code> - The message is a custom format for the client.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>SSML</code> - The message contains text formatted for voice output.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Composite</code> - The message contains an escaped JSON object containing one or\n   *           more messages from the groups that messages were assigned to when the intent was\n   *           created.</p>\n   *             </li>\n   *          </ul>\n   */\n  messageFormat?: MessageFormatType | string;\n\n  /**\n   * <p></p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>ConfirmIntent</code> - Amazon Lex is expecting a \"yes\" or \"no\" response to confirm\n   *           the intent before fulfilling an intent.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for the current\n   *           intent.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Failed</code> - Conveys that the conversation with the user has failed. This can\n   *           happen for various reasons, including the user does not provide an appropriate response to\n   *           prompts from the service, or if the Lambda function fails to fulfill the intent.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully fulfilled the\n   *           intent.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the\n   *           intent.</p>\n   *             </li>\n   *          </ul>\n   */\n  dialogState?: DialogState | string;\n\n  /**\n   * <p>If the <code>dialogState</code> is <code>ElicitSlot</code>, returns the name of the slot\n   *       for which Amazon Lex is eliciting a value.</p>\n   */\n  slotToElicit?: string;\n\n  /**\n   * <p>The audio version of the message to convey to the user.</p>\n   */\n  audioStream?: Readable | ReadableStream | Blob;\n\n  /**\n   * <p>A unique identifier for the session.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>A list of active contexts for the session.</p>\n   */\n  activeContexts?: __LazyJsonString | string;\n}\n\nexport namespace PutSessionResponse {\n  export const filterSensitiveLog = (obj: PutSessionResponse): any => ({\n    ...obj,\n    ...(obj.message && { message: SENSITIVE_STRING }),\n    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),\n  });\n}\n","import { RegionInfo, RegionInfoProvider } from \"@aws-sdk/types\";\n\n// Partition default templates\nconst AWS_TEMPLATE = \"runtime.lex.{region}.amazonaws.com\";\nconst AWS_CN_TEMPLATE = \"runtime.lex.{region}.amazonaws.com.cn\";\nconst AWS_ISO_TEMPLATE = \"runtime.lex.{region}.c2s.ic.gov\";\nconst AWS_ISO_B_TEMPLATE = \"runtime.lex.{region}.sc2s.sgov.gov\";\nconst AWS_US_GOV_TEMPLATE = \"runtime.lex.{region}.amazonaws.com\";\n\n// Partition regions\nconst AWS_REGIONS = new Set([\n  \"af-south-1\",\n  \"ap-east-1\",\n  \"ap-northeast-1\",\n  \"ap-northeast-2\",\n  \"ap-south-1\",\n  \"ap-southeast-1\",\n  \"ap-southeast-2\",\n  \"ca-central-1\",\n  \"eu-central-1\",\n  \"eu-north-1\",\n  \"eu-south-1\",\n  \"eu-west-1\",\n  \"eu-west-2\",\n  \"eu-west-3\",\n  \"me-south-1\",\n  \"sa-east-1\",\n  \"us-east-1\",\n  \"us-east-2\",\n  \"us-west-1\",\n  \"us-west-2\",\n]);\nconst AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nconst AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nconst AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nconst AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\n\nexport const defaultRegionInfoProvider: RegionInfoProvider = (region: string, options?: any) => {\n  let regionInfo: RegionInfo | undefined = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"runtime.lex.ap-northeast-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"runtime.lex.ap-southeast-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"runtime.lex.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"runtime.lex.eu-central-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"runtime.lex.eu-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"runtime.lex.eu-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"runtime.lex.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"runtime.lex.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"lex\",\n      };\n      break;\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"lex\",\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\",\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\",\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\",\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\",\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"lex\",\n        };\n      }\n  }\n  return Promise.resolve({ signingService: \"lex\", ...regionInfo });\n};\n","import { defaultRegionInfoProvider } from \"./endpoints\";\nimport { Logger as __Logger } from \"@aws-sdk/types\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\n\n/**\n * @internal\n */\nexport const ClientSharedValues = {\n  apiVersion: \"2016-11-28\",\n  disableHostPrefix: false,\n  logger: {} as __Logger,\n  regionInfoProvider: defaultRegionInfoProvider,\n  serviceId: \"Lex Runtime Service\",\n  urlParser: parseUrl,\n};\n","import packageInfo from \"./package.json\";\n\nimport { Sha256 } from \"@aws-crypto/sha256-browser\";\nimport { FetchHttpHandler, streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { invalidProvider } from \"@aws-sdk/invalid-dependency\";\nimport { DEFAULT_MAX_ATTEMPTS } from \"@aws-sdk/middleware-retry\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64-browser\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-browser\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-browser\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { ClientDefaults } from \"./LexRuntimeServiceClient\";\nimport { ClientSharedValues } from \"./runtimeConfig.shared\";\n\n/**\n * @internal\n */\nexport const ClientDefaultValues: Required<ClientDefaults> = {\n  ...ClientSharedValues,\n  runtime: \"browser\",\n  base64Decoder: fromBase64,\n  base64Encoder: toBase64,\n  bodyLengthChecker: calculateBodyLength,\n  credentialDefaultProvider: (_: unknown) => () => Promise.reject(new Error(\"Credential is missing\")),\n  defaultUserAgentProvider: defaultUserAgent({\n    serviceId: ClientSharedValues.serviceId,\n    clientVersion: packageInfo.version,\n  }),\n  maxAttempts: DEFAULT_MAX_ATTEMPTS,\n  region: invalidProvider(\"Region is missing\"),\n  requestHandler: new FetchHttpHandler(),\n  sha256: Sha256,\n  streamCollector,\n  utf8Decoder: fromUtf8,\n  utf8Encoder: toUtf8,\n};\n","import { DeleteSessionCommandInput, DeleteSessionCommandOutput } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommandInput, GetSessionCommandOutput } from \"./commands/GetSessionCommand\";\nimport { PostContentCommandInput, PostContentCommandOutput } from \"./commands/PostContentCommand\";\nimport { PostTextCommandInput, PostTextCommandOutput } from \"./commands/PostTextCommand\";\nimport { PutSessionCommandInput, PutSessionCommandOutput } from \"./commands/PutSessionCommand\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport {\n  EndpointsInputConfig,\n  EndpointsResolvedConfig,\n  RegionInputConfig,\n  RegionResolvedConfig,\n  resolveEndpointsConfig,\n  resolveRegionConfig,\n} from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport {\n  HostHeaderInputConfig,\n  HostHeaderResolvedConfig,\n  getHostHeaderPlugin,\n  resolveHostHeaderConfig,\n} from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { RetryInputConfig, RetryResolvedConfig, getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport {\n  AwsAuthInputConfig,\n  AwsAuthResolvedConfig,\n  getAwsAuthPlugin,\n  resolveAwsAuthConfig,\n} from \"@aws-sdk/middleware-signing\";\nimport {\n  UserAgentInputConfig,\n  UserAgentResolvedConfig,\n  getUserAgentPlugin,\n  resolveUserAgentConfig,\n} from \"@aws-sdk/middleware-user-agent\";\nimport { HttpHandler as __HttpHandler } from \"@aws-sdk/protocol-http\";\nimport {\n  Client as __Client,\n  SmithyConfiguration as __SmithyConfiguration,\n  SmithyResolvedConfiguration as __SmithyResolvedConfiguration,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Provider,\n  RegionInfoProvider,\n  Credentials as __Credentials,\n  Decoder as __Decoder,\n  Encoder as __Encoder,\n  HashConstructor as __HashConstructor,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  Logger as __Logger,\n  Provider as __Provider,\n  StreamCollector as __StreamCollector,\n  UrlParser as __UrlParser,\n  UserAgent as __UserAgent,\n} from \"@aws-sdk/types\";\n\nexport type ServiceInputTypes =\n  | DeleteSessionCommandInput\n  | GetSessionCommandInput\n  | PostContentCommandInput\n  | PostTextCommandInput\n  | PutSessionCommandInput;\n\nexport type ServiceOutputTypes =\n  | DeleteSessionCommandOutput\n  | GetSessionCommandOutput\n  | PostContentCommandOutput\n  | PostTextCommandOutput\n  | PutSessionCommandOutput;\n\nexport interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {\n  /**\n   * The HTTP handler to use. Fetch in browser and Https in Nodejs.\n   */\n  requestHandler?: __HttpHandler;\n\n  /**\n   * A constructor for a class implementing the @aws-sdk/types.Hash interface\n   * that computes the SHA-256 HMAC or checksum of a string or binary buffer.\n   */\n  sha256?: __HashConstructor;\n\n  /**\n   * The function that will be used to convert strings into HTTP endpoints.\n   */\n  urlParser?: __UrlParser;\n\n  /**\n   * A function that can calculate the length of a request body.\n   */\n  bodyLengthChecker?: (body: any) => number | undefined;\n\n  /**\n   * A function that converts a stream into an array of bytes.\n   */\n  streamCollector?: __StreamCollector;\n\n  /**\n   * The function that will be used to convert a base64-encoded string to a byte array\n   */\n  base64Decoder?: __Decoder;\n\n  /**\n   * The function that will be used to convert binary data to a base64-encoded string\n   */\n  base64Encoder?: __Encoder;\n\n  /**\n   * The function that will be used to convert a UTF8-encoded string to a byte array\n   */\n  utf8Decoder?: __Decoder;\n\n  /**\n   * The function that will be used to convert binary data to a UTF-8 encoded string\n   */\n  utf8Encoder?: __Encoder;\n\n  /**\n   * The runtime environment\n   */\n  runtime?: string;\n\n  /**\n   * Disable dyanamically changing the endpoint of the client based on the hostPrefix\n   * trait of an operation.\n   */\n  disableHostPrefix?: boolean;\n\n  /**\n   * Unique service identifier.\n   * @internal\n   */\n  serviceId?: string;\n\n  /**\n   * Default credentials provider; Not available in browser runtime\n   */\n  credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;\n\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | __Provider<string>;\n\n  /**\n   * Value for how many times a request will be made at most in case of retry.\n   */\n  maxAttempts?: number | __Provider<number>;\n\n  /**\n   * Optional logger for logging debug/info/warn/error.\n   */\n  logger?: __Logger;\n\n  /**\n   * Fetch related hostname, signing name or signing region with given region.\n   */\n  regionInfoProvider?: RegionInfoProvider;\n\n  /**\n   * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header\n   * @internal\n   */\n  defaultUserAgentProvider?: Provider<__UserAgent>;\n}\n\nexport type LexRuntimeServiceClientConfig = Partial<__SmithyConfiguration<__HttpHandlerOptions>> &\n  ClientDefaults &\n  RegionInputConfig &\n  EndpointsInputConfig &\n  AwsAuthInputConfig &\n  RetryInputConfig &\n  HostHeaderInputConfig &\n  UserAgentInputConfig;\n\nexport type LexRuntimeServiceClientResolvedConfig = __SmithyResolvedConfiguration<__HttpHandlerOptions> &\n  Required<ClientDefaults> &\n  RegionResolvedConfig &\n  EndpointsResolvedConfig &\n  AwsAuthResolvedConfig &\n  RetryResolvedConfig &\n  HostHeaderResolvedConfig &\n  UserAgentResolvedConfig;\n\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\nexport class LexRuntimeServiceClient extends __Client<\n  __HttpHandlerOptions,\n  ServiceInputTypes,\n  ServiceOutputTypes,\n  LexRuntimeServiceClientResolvedConfig\n> {\n  readonly config: LexRuntimeServiceClientResolvedConfig;\n\n  constructor(configuration: LexRuntimeServiceClientConfig) {\n    let _config_0 = {\n      ...__ClientDefaultValues,\n      ...configuration,\n    };\n    let _config_1 = resolveRegionConfig(_config_0);\n    let _config_2 = resolveEndpointsConfig(_config_1);\n    let _config_3 = resolveAwsAuthConfig(_config_2);\n    let _config_4 = resolveRetryConfig(_config_3);\n    let _config_5 = resolveHostHeaderConfig(_config_4);\n    let _config_6 = resolveUserAgentConfig(_config_5);\n    super(_config_6);\n    this.config = _config_6;\n    this.middlewareStack.use(getAwsAuthPlugin(this.config));\n    this.middlewareStack.use(getRetryPlugin(this.config));\n    this.middlewareStack.use(getContentLengthPlugin(this.config));\n    this.middlewareStack.use(getHostHeaderPlugin(this.config));\n    this.middlewareStack.use(getLoggerPlugin(this.config));\n    this.middlewareStack.use(getUserAgentPlugin(this.config));\n  }\n\n  destroy(): void {\n    super.destroy();\n  }\n}\n","import { DeleteSessionCommandInput, DeleteSessionCommandOutput } from \"../commands/DeleteSessionCommand\";\nimport { GetSessionCommandInput, GetSessionCommandOutput } from \"../commands/GetSessionCommand\";\nimport { PostContentCommandInput, PostContentCommandOutput } from \"../commands/PostContentCommand\";\nimport { PostTextCommandInput, PostTextCommandOutput } from \"../commands/PostTextCommand\";\nimport { PutSessionCommandInput, PutSessionCommandOutput } from \"../commands/PutSessionCommand\";\nimport {\n  ActiveContext,\n  ActiveContextTimeToLive,\n  BadGatewayException,\n  BadRequestException,\n  Button,\n  ConflictException,\n  DependencyFailedException,\n  DialogAction,\n  GenericAttachment,\n  IntentConfidence,\n  IntentSummary,\n  InternalFailureException,\n  LimitExceededException,\n  LoopDetectedException,\n  NotAcceptableException,\n  NotFoundException,\n  PredictedIntent,\n  RequestTimeoutException,\n  ResponseCard,\n  SentimentResponse,\n  UnsupportedMediaTypeException,\n} from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  LazyJsonString as __LazyJsonString,\n  SmithyException as __SmithyException,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1DeleteSessionCommand = async (\n  input: DeleteSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetSessionCommand = async (\n  input: GetSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  const query: any = {\n    ...(input.checkpointLabelFilter !== undefined && { checkpointLabelFilter: input.checkpointLabelFilter }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PostContentCommand = async (\n  input: PostContentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n    ...(isSerializableHeaderValue(input.sessionAttributes) && {\n      \"x-amz-lex-session-attributes\": Buffer.from(__LazyJsonString.fromObject(input.sessionAttributes!)).toString(\n        \"base64\"\n      ),\n    }),\n    ...(isSerializableHeaderValue(input.requestAttributes) && {\n      \"x-amz-lex-request-attributes\": Buffer.from(__LazyJsonString.fromObject(input.requestAttributes!)).toString(\n        \"base64\"\n      ),\n    }),\n    ...(isSerializableHeaderValue(input.contentType) && { \"content-type\": input.contentType! }),\n    ...(isSerializableHeaderValue(input.accept) && { accept: input.accept! }),\n    ...(isSerializableHeaderValue(input.activeContexts) && {\n      \"x-amz-lex-active-contexts\": Buffer.from(__LazyJsonString.fromObject(input.activeContexts!)).toString(\"base64\"),\n    }),\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  if (input.inputStream !== undefined) {\n    body = input.inputStream;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PostTextCommand = async (\n  input: PostTextCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.activeContexts !== undefined &&\n      input.activeContexts !== null && {\n        activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context),\n      }),\n    ...(input.inputText !== undefined && input.inputText !== null && { inputText: input.inputText }),\n    ...(input.requestAttributes !== undefined &&\n      input.requestAttributes !== null && {\n        requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context),\n      }),\n    ...(input.sessionAttributes !== undefined &&\n      input.sessionAttributes !== null && {\n        sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n      }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutSessionCommand = async (\n  input: PutSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n    ...(isSerializableHeaderValue(input.accept) && { accept: input.accept! }),\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.activeContexts !== undefined &&\n      input.activeContexts !== null && {\n        activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context),\n      }),\n    ...(input.dialogAction !== undefined &&\n      input.dialogAction !== null && { dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context) }),\n    ...(input.recentIntentSummaryView !== undefined &&\n      input.recentIntentSummaryView !== null && {\n        recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context),\n      }),\n    ...(input.sessionAttributes !== undefined &&\n      input.sessionAttributes !== null && {\n        sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n      }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1DeleteSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DeleteSessionCommandError(output, context);\n  }\n  const contents: DeleteSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    botAlias: undefined,\n    botName: undefined,\n    sessionId: undefined,\n    userId: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.botAlias !== undefined && data.botAlias !== null) {\n    contents.botAlias = data.botAlias;\n  }\n  if (data.botName !== undefined && data.botName !== null) {\n    contents.botName = data.botName;\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  if (data.userId !== undefined && data.userId !== null) {\n    contents.userId = data.userId;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DeleteSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetSessionCommandError(output, context);\n  }\n  const contents: GetSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    dialogAction: undefined,\n    recentIntentSummaryView: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.activeContexts !== undefined && data.activeContexts !== null) {\n    contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n  }\n  if (data.dialogAction !== undefined && data.dialogAction !== null) {\n    contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);\n  }\n  if (data.recentIntentSummaryView !== undefined && data.recentIntentSummaryView !== null) {\n    contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);\n  }\n  if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PostContentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostContentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PostContentCommandError(output, context);\n  }\n  const contents: PostContentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    alternativeIntents: undefined,\n    audioStream: undefined,\n    botVersion: undefined,\n    contentType: undefined,\n    dialogState: undefined,\n    inputTranscript: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    nluIntentConfidence: undefined,\n    sentimentResponse: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.contentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n    contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n  }\n  if (output.headers[\"x-amz-lex-nlu-intent-confidence\"] !== undefined) {\n    contents.nluIntentConfidence = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-nlu-intent-confidence\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-alternative-intents\"] !== undefined) {\n    contents.alternativeIntents = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-alternative-intents\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n    contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n  }\n  if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n    contents.sessionAttributes = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-sentiment\"] !== undefined) {\n    contents.sentimentResponse = output.headers[\"x-amz-lex-sentiment\"];\n  }\n  if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n    contents.message = output.headers[\"x-amz-lex-message\"];\n  }\n  if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n    contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n  }\n  if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n    contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n  }\n  if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n    contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n  }\n  if (output.headers[\"x-amz-lex-input-transcript\"] !== undefined) {\n    contents.inputTranscript = output.headers[\"x-amz-lex-input-transcript\"];\n  }\n  if (output.headers[\"x-amz-lex-bot-version\"] !== undefined) {\n    contents.botVersion = output.headers[\"x-amz-lex-bot-version\"];\n  }\n  if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n    contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n  }\n  if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n    contents.activeContexts = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  const data: any = output.body;\n  contents.audioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PostContentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostContentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LoopDetectedException\":\n    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n      response = {\n        ...(await deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotAcceptableException\":\n    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n      response = {\n        ...(await deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"RequestTimeoutException\":\n    case \"com.amazonaws.lexruntimeservice#RequestTimeoutException\":\n      response = {\n        ...(await deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedMediaTypeException\":\n    case \"com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PostTextCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostTextCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PostTextCommandError(output, context);\n  }\n  const contents: PostTextCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    alternativeIntents: undefined,\n    botVersion: undefined,\n    dialogState: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    nluIntentConfidence: undefined,\n    responseCard: undefined,\n    sentimentResponse: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.activeContexts !== undefined && data.activeContexts !== null) {\n    contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n  }\n  if (data.alternativeIntents !== undefined && data.alternativeIntents !== null) {\n    contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);\n  }\n  if (data.botVersion !== undefined && data.botVersion !== null) {\n    contents.botVersion = data.botVersion;\n  }\n  if (data.dialogState !== undefined && data.dialogState !== null) {\n    contents.dialogState = data.dialogState;\n  }\n  if (data.intentName !== undefined && data.intentName !== null) {\n    contents.intentName = data.intentName;\n  }\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  if (data.messageFormat !== undefined && data.messageFormat !== null) {\n    contents.messageFormat = data.messageFormat;\n  }\n  if (data.nluIntentConfidence !== undefined && data.nluIntentConfidence !== null) {\n    contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);\n  }\n  if (data.responseCard !== undefined && data.responseCard !== null) {\n    contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);\n  }\n  if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {\n    contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);\n  }\n  if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  if (data.slotToElicit !== undefined && data.slotToElicit !== null) {\n    contents.slotToElicit = data.slotToElicit;\n  }\n  if (data.slots !== undefined && data.slots !== null) {\n    contents.slots = deserializeAws_restJson1StringMap(data.slots, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PostTextCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostTextCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LoopDetectedException\":\n    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n      response = {\n        ...(await deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutSessionCommandError(output, context);\n  }\n  const contents: PutSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    audioStream: undefined,\n    contentType: undefined,\n    dialogState: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.contentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n    contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n  }\n  if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n    contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n  }\n  if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n    contents.sessionAttributes = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n    contents.message = output.headers[\"x-amz-lex-message\"];\n  }\n  if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n    contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n  }\n  if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n    contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n  }\n  if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n    contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n  }\n  if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n    contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n  }\n  if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n    contents.activeContexts = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  const data: any = output.body;\n  contents.audioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotAcceptableException\":\n    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n      response = {\n        ...(await deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1BadGatewayExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BadGatewayException> => {\n  const contents: BadGatewayException = {\n    name: \"BadGatewayException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1BadRequestExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BadRequestException> => {\n  const contents: BadRequestException = {\n    name: \"BadRequestException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ConflictExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ConflictException> => {\n  const contents: ConflictException = {\n    name: \"ConflictException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1DependencyFailedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<DependencyFailedException> => {\n  const contents: DependencyFailedException = {\n    name: \"DependencyFailedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InternalFailureExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InternalFailureException> => {\n  const contents: InternalFailureException = {\n    name: \"InternalFailureException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LimitExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LimitExceededException> => {\n  const contents: LimitExceededException = {\n    name: \"LimitExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n    retryAfterSeconds: undefined,\n  };\n  if (parsedOutput.headers[\"retry-after\"] !== undefined) {\n    contents.retryAfterSeconds = parsedOutput.headers[\"retry-after\"];\n  }\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LoopDetectedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LoopDetectedException> => {\n  const contents: LoopDetectedException = {\n    name: \"LoopDetectedException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1NotAcceptableExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NotAcceptableException> => {\n  const contents: NotAcceptableException = {\n    name: \"NotAcceptableException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1NotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NotFoundException> => {\n  const contents: NotFoundException = {\n    name: \"NotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1RequestTimeoutExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<RequestTimeoutException> => {\n  const contents: RequestTimeoutException = {\n    name: \"RequestTimeoutException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedMediaTypeException> => {\n  const contents: UnsupportedMediaTypeException = {\n    name: \"UnsupportedMediaTypeException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1ActiveContext = (input: ActiveContext, context: __SerdeContext): any => {\n  return {\n    ...(input.name !== undefined && input.name !== null && { name: input.name }),\n    ...(input.parameters !== undefined &&\n      input.parameters !== null && {\n        parameters: serializeAws_restJson1ActiveContextParametersMap(input.parameters, context),\n      }),\n    ...(input.timeToLive !== undefined &&\n      input.timeToLive !== null && {\n        timeToLive: serializeAws_restJson1ActiveContextTimeToLive(input.timeToLive, context),\n      }),\n  };\n};\n\nconst serializeAws_restJson1ActiveContextParametersMap = (\n  input: { [key: string]: string },\n  context: __SerdeContext\n): any => {\n  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst serializeAws_restJson1ActiveContextsList = (input: ActiveContext[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1ActiveContext(entry, context);\n    });\n};\n\nconst serializeAws_restJson1ActiveContextTimeToLive = (\n  input: ActiveContextTimeToLive,\n  context: __SerdeContext\n): any => {\n  return {\n    ...(input.timeToLiveInSeconds !== undefined &&\n      input.timeToLiveInSeconds !== null && { timeToLiveInSeconds: input.timeToLiveInSeconds }),\n    ...(input.turnsToLive !== undefined && input.turnsToLive !== null && { turnsToLive: input.turnsToLive }),\n  };\n};\n\nconst serializeAws_restJson1DialogAction = (input: DialogAction, context: __SerdeContext): any => {\n  return {\n    ...(input.fulfillmentState !== undefined &&\n      input.fulfillmentState !== null && { fulfillmentState: input.fulfillmentState }),\n    ...(input.intentName !== undefined && input.intentName !== null && { intentName: input.intentName }),\n    ...(input.message !== undefined && input.message !== null && { message: input.message }),\n    ...(input.messageFormat !== undefined && input.messageFormat !== null && { messageFormat: input.messageFormat }),\n    ...(input.slotToElicit !== undefined && input.slotToElicit !== null && { slotToElicit: input.slotToElicit }),\n    ...(input.slots !== undefined &&\n      input.slots !== null && { slots: serializeAws_restJson1StringMap(input.slots, context) }),\n    ...(input.type !== undefined && input.type !== null && { type: input.type }),\n  };\n};\n\nconst serializeAws_restJson1IntentSummary = (input: IntentSummary, context: __SerdeContext): any => {\n  return {\n    ...(input.checkpointLabel !== undefined &&\n      input.checkpointLabel !== null && { checkpointLabel: input.checkpointLabel }),\n    ...(input.confirmationStatus !== undefined &&\n      input.confirmationStatus !== null && { confirmationStatus: input.confirmationStatus }),\n    ...(input.dialogActionType !== undefined &&\n      input.dialogActionType !== null && { dialogActionType: input.dialogActionType }),\n    ...(input.fulfillmentState !== undefined &&\n      input.fulfillmentState !== null && { fulfillmentState: input.fulfillmentState }),\n    ...(input.intentName !== undefined && input.intentName !== null && { intentName: input.intentName }),\n    ...(input.slotToElicit !== undefined && input.slotToElicit !== null && { slotToElicit: input.slotToElicit }),\n    ...(input.slots !== undefined &&\n      input.slots !== null && { slots: serializeAws_restJson1StringMap(input.slots, context) }),\n  };\n};\n\nconst serializeAws_restJson1IntentSummaryList = (input: IntentSummary[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1IntentSummary(entry, context);\n    });\n};\n\nconst serializeAws_restJson1StringMap = (input: { [key: string]: string }, context: __SerdeContext): any => {\n  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeAws_restJson1ActiveContext = (output: any, context: __SerdeContext): ActiveContext => {\n  return {\n    name: output.name !== undefined && output.name !== null ? output.name : undefined,\n    parameters:\n      output.parameters !== undefined && output.parameters !== null\n        ? deserializeAws_restJson1ActiveContextParametersMap(output.parameters, context)\n        : undefined,\n    timeToLive:\n      output.timeToLive !== undefined && output.timeToLive !== null\n        ? deserializeAws_restJson1ActiveContextTimeToLive(output.timeToLive, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1ActiveContextParametersMap = (\n  output: any,\n  context: __SerdeContext\n): { [key: string]: string } => {\n  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeAws_restJson1ActiveContextsList = (output: any, context: __SerdeContext): ActiveContext[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1ActiveContext(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1ActiveContextTimeToLive = (\n  output: any,\n  context: __SerdeContext\n): ActiveContextTimeToLive => {\n  return {\n    timeToLiveInSeconds:\n      output.timeToLiveInSeconds !== undefined && output.timeToLiveInSeconds !== null\n        ? output.timeToLiveInSeconds\n        : undefined,\n    turnsToLive: output.turnsToLive !== undefined && output.turnsToLive !== null ? output.turnsToLive : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1Button = (output: any, context: __SerdeContext): Button => {\n  return {\n    text: output.text !== undefined && output.text !== null ? output.text : undefined,\n    value: output.value !== undefined && output.value !== null ? output.value : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1DialogAction = (output: any, context: __SerdeContext): DialogAction => {\n  return {\n    fulfillmentState:\n      output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    message: output.message !== undefined && output.message !== null ? output.message : undefined,\n    messageFormat:\n      output.messageFormat !== undefined && output.messageFormat !== null ? output.messageFormat : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n    type: output.type !== undefined && output.type !== null ? output.type : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1GenericAttachment = (output: any, context: __SerdeContext): GenericAttachment => {\n  return {\n    attachmentLinkUrl:\n      output.attachmentLinkUrl !== undefined && output.attachmentLinkUrl !== null\n        ? output.attachmentLinkUrl\n        : undefined,\n    buttons:\n      output.buttons !== undefined && output.buttons !== null\n        ? deserializeAws_restJson1listOfButtons(output.buttons, context)\n        : undefined,\n    imageUrl: output.imageUrl !== undefined && output.imageUrl !== null ? output.imageUrl : undefined,\n    subTitle: output.subTitle !== undefined && output.subTitle !== null ? output.subTitle : undefined,\n    title: output.title !== undefined && output.title !== null ? output.title : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1genericAttachmentList = (output: any, context: __SerdeContext): GenericAttachment[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1GenericAttachment(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1IntentConfidence = (output: any, context: __SerdeContext): IntentConfidence => {\n  return {\n    score: output.score !== undefined && output.score !== null ? output.score : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1IntentList = (output: any, context: __SerdeContext): PredictedIntent[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1PredictedIntent(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1IntentSummary = (output: any, context: __SerdeContext): IntentSummary => {\n  return {\n    checkpointLabel:\n      output.checkpointLabel !== undefined && output.checkpointLabel !== null ? output.checkpointLabel : undefined,\n    confirmationStatus:\n      output.confirmationStatus !== undefined && output.confirmationStatus !== null\n        ? output.confirmationStatus\n        : undefined,\n    dialogActionType:\n      output.dialogActionType !== undefined && output.dialogActionType !== null ? output.dialogActionType : undefined,\n    fulfillmentState:\n      output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1IntentSummaryList = (output: any, context: __SerdeContext): IntentSummary[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1IntentSummary(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1listOfButtons = (output: any, context: __SerdeContext): Button[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1Button(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1PredictedIntent = (output: any, context: __SerdeContext): PredictedIntent => {\n  return {\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    nluIntentConfidence:\n      output.nluIntentConfidence !== undefined && output.nluIntentConfidence !== null\n        ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context)\n        : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1ResponseCard = (output: any, context: __SerdeContext): ResponseCard => {\n  return {\n    contentType: output.contentType !== undefined && output.contentType !== null ? output.contentType : undefined,\n    genericAttachments:\n      output.genericAttachments !== undefined && output.genericAttachments !== null\n        ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context)\n        : undefined,\n    version: output.version !== undefined && output.version !== null ? output.version : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1SentimentResponse = (output: any, context: __SerdeContext): SentimentResponse => {\n  return {\n    sentimentLabel:\n      output.sentimentLabel !== undefined && output.sentimentLabel !== null ? output.sentimentLabel : undefined,\n    sentimentScore:\n      output.sentimentScore !== undefined && output.sentimentScore !== null ? output.sentimentScore : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1StringMap = (output: any, context: __SerdeContext): { [key: string]: string } => {\n  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n","import {\n  LexRuntimeServiceClientResolvedConfig,\n  ServiceInputTypes,\n  ServiceOutputTypes,\n} from \"../LexRuntimeServiceClient\";\nimport { PostTextRequest, PostTextResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1PostTextCommand,\n  serializeAws_restJson1PostTextCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PostTextCommandInput = PostTextRequest;\nexport type PostTextCommandOutput = PostTextResponse & __MetadataBearer;\n\n/**\n * <p>Sends user input to Amazon Lex. Client applications can use this API to send requests to\n *       Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it\n *       built for the bot. </p>\n *          <p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an\n *       optional <code>responseCard</code> to display. Consider the following example messages: </p>\n *          <ul>\n *             <li>\n *                <p> For a user input \"I would like a pizza\", Amazon Lex might return a response with a\n *           message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\"\n *         </p>\n *             </li>\n *             <li>\n *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n *           response with a message to obtain user confirmation \"Proceed with the pizza order?\".\n *         </p>\n *             </li>\n *             <li>\n *                <p> After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return\n *           a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n *             </li>\n *          </ul>\n *\n *          <p> Not all Amazon Lex messages require a user response. For example, a conclusion statement\n *       does not require a response. Some messages require only a \"yes\" or \"no\" user response. In\n *       addition to the <code>message</code>, Amazon Lex provides additional context about the message\n *       in the response that you might use to enhance client behavior, for example, to display the\n *       appropriate client user interface. These are the <code>slotToElicit</code>,\n *         <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the\n *       response. Consider the following examples: </p>\n *\n *          <ul>\n *             <li>\n *                <p>If the message is to elicit slot data, Amazon Lex returns the following context\n *           information:</p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>dialogState</code> set to ElicitSlot </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>intentName</code> set to the intent name in the current context </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>slotToElicit</code> set to the slot name for which the <code>message</code> is\n *               eliciting information </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>slots</code> set to a map of slots, configured for the intent, with currently\n *               known values </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p> If the message is a confirmation prompt, the <code>dialogState</code> is set to\n *           ConfirmIntent and <code>SlotToElicit</code> is set to null. </p>\n *             </li>\n *             <li>\n *                <p>If the message is a clarification prompt (configured for the intent) that indicates\n *           that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent\n *           and <code>slotToElicit</code> is set to null. </p>\n *             </li>\n *          </ul>\n *\n *          <p> In addition, Amazon Lex also returns your application-specific\n *         <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n */\nexport class PostTextCommand extends $Command<\n  PostTextCommandInput,\n  PostTextCommandOutput,\n  LexRuntimeServiceClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PostTextCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: LexRuntimeServiceClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PostTextCommandInput, PostTextCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"LexRuntimeServiceClient\";\n    const commandName = \"PostTextCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PostTextRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PostTextResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PostTextCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1PostTextCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PostTextCommandOutput> {\n    return deserializeAws_restJson1PostTextCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import {\n  LexRuntimeServiceClientResolvedConfig,\n  ServiceInputTypes,\n  ServiceOutputTypes,\n} from \"../LexRuntimeServiceClient\";\nimport { PostContentRequest, PostContentResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1PostContentCommand,\n  serializeAws_restJson1PostContentCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PostContentCommandInput = Omit<PostContentRequest, \"inputStream\"> & {\n  inputStream: PostContentRequest[\"inputStream\"] | string | Uint8Array | Buffer;\n};\nexport type PostContentCommandOutput = PostContentResponse & __MetadataBearer;\n\n/**\n * <p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio\n *       requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model\n *       that it built for the bot. </p>\n *          <p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use\n *       8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p>\n *          <p> In response, Amazon Lex returns the next message to convey to the user. Consider the following\n *       example messages: </p>\n *          <ul>\n *             <li>\n *                <p> For a user input \"I would like a pizza,\" Amazon Lex might return a response with a message\n *           eliciting slot data (for example, <code>PizzaSize</code>): \"What size pizza would you\n *           like?\". </p>\n *             </li>\n *             <li>\n *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n *           response with a message to get user confirmation: \"Order the pizza?\". </p>\n *             </li>\n *             <li>\n *                <p> After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return a\n *           conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n *             </li>\n *          </ul>\n *          <p> Not all Amazon Lex messages require a response from the user. For example, conclusion\n *       statements do not require a response. Some messages require only a yes or no response. In\n *       addition to the <code>message</code>, Amazon Lex provides additional context about the message in\n *       the response that you can use to enhance client behavior, such as displaying the appropriate\n *       client user interface. Consider the following examples: </p>\n *          <ul>\n *             <li>\n *                <p> If the message is to elicit slot data, Amazon Lex returns the following context\n *           information: </p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-intent-name</code> header set to the intent name in the current\n *               context </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the\n *                 <code>message</code> is eliciting information </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent\n *               with their current values </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>\n *           header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>\n *           header is omitted. </p>\n *             </li>\n *             <li>\n *                <p> If the message is a clarification prompt configured for the intent, indicating that\n *           the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to\n *             <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.\n *         </p>\n *             </li>\n *          </ul>\n *          <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.\n *       For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n */\nexport class PostContentCommand extends $Command<\n  PostContentCommandInput,\n  PostContentCommandOutput,\n  LexRuntimeServiceClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PostContentCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: LexRuntimeServiceClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PostContentCommandInput, PostContentCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"LexRuntimeServiceClient\";\n    const commandName = \"PostContentCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PostContentRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PostContentResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PostContentCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1PostContentCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PostContentCommandOutput> {\n    return deserializeAws_restJson1PostContentCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { Readable } from 'stream';\nexport const convert = (\n\tstream: Blob | Readable | ReadableStream\n): Promise<Uint8Array> => {\n\tif (stream instanceof Blob || stream instanceof ReadableStream) {\n\t\treturn new Response(stream)\n\t\t\t.arrayBuffer()\n\t\t\t.then(buffer => new Uint8Array(buffer));\n\t} else {\n\t\tthrow new Error('Readable is not supported.');\n\t}\n};\n","/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeServiceClient,\n\tPostTextCommand,\n\tPostContentCommand,\n} from '@aws-sdk/client-lex-runtime-service';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\n\nconst logger = new Logger('AWSLexProvider');\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\tprivate lexRuntimeServiceClient: LexRuntimeServiceClient;\n\tprivate _botsCompleteCallback: object;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSLexProvider';\n\t}\n\n\treportBotStatus(data, botname) {\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', data.dialogState);\n\t\tif (\n\t\t\tdata.dialogState === 'ReadyForFulfillment' ||\n\t\t\tdata.dialogState === 'Fulfilled'\n\t\t) {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis._botsCompleteCallback[botname](null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete(null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (data.dialogState === 'Failed') {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._botsCompleteCallback[botname]('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet params;\n\t\tif (typeof message === 'string') {\n\t\t\tparams = {\n\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\tbotName: botname,\n\t\t\t\tinputText: message,\n\t\t\t\tuserId: credentials.identityId,\n\t\t\t};\n\n\t\t\tlogger.debug('postText to lex', message);\n\n\t\t\ttry {\n\t\t\t\tconst postTextCommand = new PostTextCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(postTextCommand);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn data;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst {\n\t\t\t\tcontent,\n\t\t\t\toptions: { messageType },\n\t\t\t} = message;\n\t\t\tif (messageType === 'voice') {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'audio/x-l16; sample-rate=16000',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'text/plain; charset=utf-8',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t\tlogger.debug('postContent to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postContentCommand = new PostContentCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(\n\t\t\t\t\tpostContentCommand\n\t\t\t\t);\n\t\t\t\tconst audioArray = await convert(data.audioStream);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn { ...data, ...{ audioStream: audioArray } };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tonComplete(botname: string, callback) {\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new ErrorEvent('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n}\n","/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tInteractionsOptions,\n\tInteractionsProviders,\n\tInteractionsProvider,\n\tInteractionsMessage,\n\tInteractionsResponse,\n} from './types';\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nconst logger = new Logger('Interactions');\n\nexport class InteractionsClass {\n\tprivate _options: InteractionsOptions;\n\n\tprivate _pluggables: InteractionsProviders;\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t */\n\tconstructor(options: InteractionsOptions) {\n\t\tthis._options = options;\n\t\tlogger.debug('Interactions Options', this._options);\n\t\tthis._pluggables = {};\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Interactions';\n\t}\n\n\t/**\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: InteractionsOptions) {\n\t\tconst opt = options ? options.Interactions || options : {};\n\t\tlogger.debug('configure Interactions', { opt });\n\t\tthis._options = { bots: {}, ...opt, ...opt.Interactions };\n\n\t\tconst aws_bots_config = this._options.aws_bots_config;\n\t\tconst bots_config = this._options.bots;\n\n\t\tif (!Object.keys(bots_config).length && aws_bots_config) {\n\t\t\t// Convert aws_bots_config to bots object\n\t\t\tif (Array.isArray(aws_bots_config)) {\n\t\t\t\taws_bots_config.forEach(bot => {\n\t\t\t\t\tthis._options.bots[bot.name] = bot;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Check if AWSLex provider is already on pluggables\n\t\tif (\n\t\t\t!this._pluggables.AWSLexProvider &&\n\t\t\tbots_config &&\n\t\t\tObject.keys(bots_config)\n\t\t\t\t.map(key => bots_config[key])\n\t\t\t\t.find(bot => !bot.providerName || bot.providerName === 'AWSLexProvider')\n\t\t) {\n\t\t\tthis._pluggables.AWSLexProvider = new AWSLexProvider();\n\t\t}\n\n\t\tObject.keys(this._pluggables).map(key => {\n\t\t\tthis._pluggables[key].configure(this._options.bots);\n\t\t});\n\n\t\treturn this._options;\n\t}\n\n\tpublic addPluggable(pluggable: InteractionsProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Interactions') {\n\t\t\tif (!this._pluggables[pluggable.getProviderName()]) {\n\t\t\t\tpluggable.configure(this._options.bots);\n\t\t\t\tthis._pluggables[pluggable.getProviderName()] = pluggable;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Bot ' + pluggable.getProviderName() + ' already plugged'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: InteractionsMessage\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: object\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string | object\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\tthrow new Error(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\treturn await this._pluggables[botProvider].sendMessage(botname, message);\n\t}\n\n\tpublic onComplete(botname: string, callback: (err, confirmation) => void) {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\tthrow new Error(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\tthis._pluggables[botProvider].onComplete(botname, callback);\n\t}\n}\n\nexport const Interactions = new InteractionsClass(null);\nAmplify.register(Interactions);\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { r as registerInstance, h, c as createEvent, H as Host, g as getElement } from './index-83f2275b.js';\nimport { Logger, browserOrNode, I18n } from '@aws-amplify/core';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-108d469f.js';\nimport { c as NO_INTERACTIONS_MODULE_FOUND } from './constants-c8ecaa24.js';\nimport { Interactions } from '@aws-amplify/interactions';\n// AudioRecorder settings\nvar RECORDER_EXPORT_MIME_TYPE = 'application/octet-stream';\nvar DEFAULT_EXPORT_SAMPLE_RATE = 16000;\nvar FFT_SIZE = 2048; // window size in samples for Fast Fourier Transform (FFT)\nvar FFT_MAX_DECIBELS = -10; // maximum power value in the scaling range for the FFT analysis data\nvar FFT_MIN_DECIBELS = -90; // minimum power value in the scaling range for the FFT analysis data\nvar FFT_SMOOTHING_TIME_CONSTANT = 0.85; // averaging constant with the last analysis frame\n/**\n * Merges multiple buffers into one.\n */\nvar mergeBuffers = function (bufferArray, recLength) {\n    var result = new Float32Array(recLength);\n    var offset = 0;\n    for (var i = 0; i < bufferArray.length; i++) {\n        result.set(bufferArray[i], offset);\n        offset += bufferArray[i].length;\n    }\n    return result;\n};\n/**\n * Downsamples audio to desired export sample rate.\n */\nvar downsampleBuffer = function (buffer, recordSampleRate, exportSampleRate) {\n    if (exportSampleRate === recordSampleRate) {\n        return buffer;\n    }\n    var sampleRateRatio = recordSampleRate / exportSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n        var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n        var accum = 0, count = 0;\n        for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n            accum += buffer[i];\n            count++;\n        }\n        result[offsetResult] = accum / count;\n        offsetResult++;\n        offsetBuffer = nextOffsetBuffer;\n    }\n    return result;\n};\n/**\n * converts raw audio values to 16 bit pcm.\n */\nvar floatTo16BitPCM = function (output, offset, input) {\n    var byteOffset = offset;\n    for (var i = 0; i < input.length; i++, byteOffset += 2) {\n        var s = Math.max(-1, Math.min(1, input[i]));\n        output.setInt16(byteOffset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n};\n/**\n * Write given strings in big-endian order.\n */\nvar writeString = function (view, offset, string) {\n    for (var i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n};\n/**\n * Encodes raw pcm audio into a wav file.\n */\nvar encodeWAV = function (samples, exportSampleRate) {\n    /**\n     * WAV file consists of three parts: RIFF header, WAVE subchunk, and data subchunk. We precompute the size of them.\n     */\n    var audioSize = samples.length * 2; // We use 16-bit samples, so we have (2 * sampleLength) bytes.\n    var fmtSize = 24; // Byte size of the fmt subchunk: 24 bytes that the audio information that we'll set below.\n    var dataSize = 8 + audioSize; // Byte size of the data subchunk: raw sound data plus 8 bytes for the subchunk descriptions.\n    var totalByteSize = 12 + fmtSize + dataSize; // Byte size of the whole file, including the chunk header / descriptor.\n    // create DataView object to write byte values into\n    var buffer = new ArrayBuffer(totalByteSize); // buffer to write the chunk values in.\n    var view = new DataView(buffer);\n    /**\n     * Start writing the .wav file. We write top to bottom, so byte offset (first numeric argument) increases strictly.\n     */\n    // RIFF header\n    writeString(view, 0, 'RIFF'); // At offset 0, write the letters \"RIFF\"\n    view.setUint32(4, fmtSize + dataSize, true); // At offset 4, write the size of fmt and data chunk size combined.\n    writeString(view, 8, 'WAVE'); // At offset 8, write the format type \"WAVE\"\n    // fmt subchunk\n    writeString(view, 12, 'fmt '); //chunkdId 'fmt '\n    view.setUint32(16, fmtSize - 8, true); // fmt subchunk size below this value. We set 8 bytes already, so subtract 8 bytes from fmtSize.\n    view.setUint16(20, 1, true); // Audio format code, which is 1 for PCM.\n    view.setUint16(22, 1, true); // Number of audio channels. We use mono, ie 1.\n    view.setUint32(24, exportSampleRate, true); // Sample rate of the audio file.\n    view.setUint32(28, exportSampleRate * 2, true); // Data rate, or # of data bytes per second. Since each sample is 2 bytes, this is 2 * sampleRate.\n    view.setUint16(32, 2, true); // block align, # of bytes per sample including all channels, ie. 2 bytes.\n    view.setUint16(34, 16, true); // bits per sample, ie. 16 bits\n    // data subchunk\n    writeString(view, 36, 'data'); // write the chunkId 'data'\n    view.setUint32(40, audioSize, true); // Audio byte size\n    floatTo16BitPCM(view, 44, samples); // raw pcm values then go here.\n    return view;\n};\n/**\n * Given arrays of raw pcm audio, downsamples the audio to desired sample rate and encodes it to a wav audio file.\n *\n * @param recBuffer {Float32Array[]} - 2d float array containing the recorded raw audio\n * @param recLength {number} - total length of recorded audio\n * @param recordSampleRate {number} - sample rate of the recorded audio\n * @param exportSampleRate {number} - desired sample rate of the exported file\n */\nvar exportBuffer = function (recBuffer, recLength, recordSampleRate, exportSampleRate) {\n    var mergedBuffers = mergeBuffers(recBuffer, recLength);\n    var downsampledBuffer = downsampleBuffer(mergedBuffers, recordSampleRate, exportSampleRate);\n    var encodedWav = encodeWAV(downsampledBuffer, exportSampleRate);\n    var audioBlob = new Blob([encodedWav], {\n        type: RECORDER_EXPORT_MIME_TYPE,\n    });\n    return audioBlob;\n};\nvar logger = new Logger('AudioRecorder');\nvar AudioRecorder = /** @class */ (function () {\n    function AudioRecorder(options) {\n        // input mic stream is stored in a buffer\n        this.streamBuffer = [];\n        this.streamBufferLength = 0;\n        this.recording = false;\n        this.options = options;\n    }\n    /**\n     * This must be called first to enable audio context and request microphone access.\n     * Once access granted, it connects all the necessary audio nodes to the context so that it can begin recording or playing.\n     */\n    AudioRecorder.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!browserOrNode().isBrowser) return [3 /*break*/, 2];\n                        window.AudioContext =\n                            window.AudioContext || window.webkitAudioContext;\n                        this.audioContext = new AudioContext();\n                        return [4 /*yield*/, navigator.mediaDevices\n                                .getUserMedia({ audio: true })\n                                .then(function (stream) {\n                                _this.audioSupported = true;\n                                _this.setupAudioNodes(stream);\n                            })\n                                .catch(function () {\n                                _this.audioSupported = false;\n                                return Promise.reject('Audio is not supported');\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        this.audioSupported = false;\n                        return [2 /*return*/, Promise.reject('Audio is not supported')];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Setup audio nodes after successful `init`.\n     */\n    AudioRecorder.prototype.setupAudioNodes = function (stream) {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_1, sourceNode, processorNode, analyserNode;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.audioContext.resume()];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_1 = _a.sent();\n                        logger.error(err_1);\n                        return [3 /*break*/, 3];\n                    case 3:\n                        sourceNode = this.audioContext.createMediaStreamSource(stream);\n                        processorNode = this.audioContext.createScriptProcessor(4096, 1, 1);\n                        processorNode.onaudioprocess = function (audioProcessingEvent) {\n                            if (!_this.recording)\n                                return;\n                            var stream = audioProcessingEvent.inputBuffer.getChannelData(0);\n                            _this.streamBuffer.push(new Float32Array(stream)); // set to a copy of the stream\n                            _this.streamBufferLength += stream.length;\n                            _this.analyse();\n                        };\n                        analyserNode = this.audioContext.createAnalyser();\n                        analyserNode.minDecibels = FFT_MIN_DECIBELS;\n                        analyserNode.maxDecibels = FFT_MAX_DECIBELS;\n                        analyserNode.smoothingTimeConstant = FFT_SMOOTHING_TIME_CONSTANT;\n                        sourceNode.connect(analyserNode);\n                        analyserNode.connect(processorNode);\n                        processorNode.connect(sourceNode.context.destination);\n                        this.analyserNode = analyserNode;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Start recording audio and listen for silence.\n     *\n     * @param onSilence {SilenceHandler} - called whenever silence is detected\n     * @param visualizer {Visualizer} - called with audio data on each audio process to be used for visualization.\n     */\n    AudioRecorder.prototype.startRecording = function (onSilence, visualizer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var context, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.recording || !this.audioSupported)\n                            return [2 /*return*/];\n                        this.onSilence = onSilence || function () { };\n                        this.visualizer = visualizer || function () { };\n                        context = this.audioContext;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, context.resume()];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_2 = _a.sent();\n                        logger.error(err_2);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.start = Date.now();\n                        this.recording = true;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Pause recording\n     */\n    AudioRecorder.prototype.stopRecording = function () {\n        if (!this.audioSupported)\n            return;\n        this.recording = false;\n    };\n    /**\n     * Pause recording and clear audio buffer\n     */\n    AudioRecorder.prototype.clear = function () {\n        this.stopRecording();\n        this.streamBufferLength = 0;\n        this.streamBuffer = [];\n    };\n    /**\n     * Plays given audioStream with audioContext\n     *\n     * @param buffer {Uint8Array} - audioStream to be played\n     */\n    AudioRecorder.prototype.play = function (buffer) {\n        var _this = this;\n        if (!buffer || !this.audioSupported)\n            return;\n        var myBlob = new Blob([buffer]);\n        return new Promise(function (res, rej) {\n            var fileReader = new FileReader();\n            fileReader.onload = function () {\n                if (_this.playbackSource)\n                    _this.playbackSource.disconnect(); // disconnect previous playback source\n                _this.playbackSource = _this.audioContext.createBufferSource();\n                var successCallback = function (buf) {\n                    _this.playbackSource.buffer = buf;\n                    _this.playbackSource.connect(_this.audioContext.destination);\n                    _this.playbackSource.onended = function () {\n                        return res();\n                    };\n                    _this.playbackSource.start(0);\n                };\n                var errorCallback = function (err) {\n                    return rej(err);\n                };\n                _this.audioContext.decodeAudioData(fileReader.result, successCallback, errorCallback);\n            };\n            fileReader.onerror = function () { return rej(); };\n            fileReader.readAsArrayBuffer(myBlob);\n        });\n    };\n    /**\n     * Stops playing audio if there's a playback source connected.\n     */\n    AudioRecorder.prototype.stop = function () {\n        if (this.playbackSource) {\n            this.playbackSource.stop();\n        }\n    };\n    /**\n     * Called after each audioProcess. Check for silence and give fft time domain data to visualizer.\n     */\n    AudioRecorder.prototype.analyse = function () {\n        if (!this.audioSupported)\n            return;\n        var analyser = this.analyserNode;\n        analyser.fftSize = FFT_SIZE;\n        var bufferLength = analyser.fftSize;\n        var dataArray = new Uint8Array(bufferLength);\n        var amplitude = this.options.amplitude;\n        var time = this.options.time;\n        analyser.getByteTimeDomainData(dataArray);\n        this.visualizer(dataArray, bufferLength);\n        for (var i = 0; i < bufferLength; i++) {\n            // Normalize between -1 and 1.\n            var curr_value_time = dataArray[i] / 128 - 1.0;\n            if (curr_value_time > amplitude || curr_value_time < -1 * amplitude) {\n                this.start = Date.now();\n            }\n        }\n        var newtime = Date.now();\n        var elapsedTime = newtime - this.start;\n        if (elapsedTime > time) {\n            this.onSilence();\n        }\n    };\n    /**\n     * Encodes recorded buffer to a wav file and exports it to a blob.\n     *\n     * @param exportSampleRate {number} - desired sample rate of the exported buffer\n     */\n    AudioRecorder.prototype.exportWAV = function (exportSampleRate) {\n        if (exportSampleRate === void 0) { exportSampleRate = DEFAULT_EXPORT_SAMPLE_RATE; }\n        return __awaiter(this, void 0, void 0, function () {\n            var recordSampleRate, blob;\n            return __generator(this, function (_a) {\n                if (!this.audioSupported)\n                    return [2 /*return*/];\n                recordSampleRate = this.audioContext.sampleRate;\n                blob = exportBuffer(this.streamBuffer, this.streamBufferLength, recordSampleRate, exportSampleRate);\n                this.clear();\n                return [2 /*return*/, blob];\n            });\n        });\n    };\n    return AudioRecorder;\n}());\nvar visualize = function (dataArray, bufferLength, canvas) {\n    if (!canvas)\n        return;\n    if (!browserOrNode().isBrowser)\n        throw new Error('Visualization is not supported on non-browsers.');\n    var _a = canvas.getBoundingClientRect(), width = _a.width, height = _a.height;\n    // need to update the default canvas width and height\n    canvas.width = width;\n    canvas.height = height;\n    var canvasCtx = canvas.getContext('2d');\n    canvasCtx.fillStyle = 'white';\n    canvasCtx.clearRect(0, 0, width, height);\n    var draw = function () {\n        canvasCtx.fillRect(0, 0, width, height);\n        canvasCtx.lineWidth = 1;\n        var color = getComputedStyle(document.documentElement).getPropertyValue('--amplify-primary-color');\n        canvasCtx.strokeStyle = !color || color === '' ? '#ff9900' : color; // TODO: try separate css variable\n        canvasCtx.beginPath();\n        var sliceWidth = (width * 1.0) / bufferLength;\n        var x = 0;\n        for (var i = 0; i < bufferLength || i % 3 === 0; i++) {\n            var value = dataArray[i] / 128.0;\n            var y = (value * height) / 2;\n            if (i === 0) {\n                canvasCtx.moveTo(x, y);\n            }\n            else {\n                canvasCtx.lineTo(x, y);\n            }\n            x += sliceWidth;\n        }\n        canvasCtx.lineTo(canvas.width, canvas.height / 2);\n        canvasCtx.stroke();\n    };\n    // Register our draw function with requestAnimationFrame.\n    requestAnimationFrame(draw);\n};\nvar amplifyChatbotCss = \".bot .dot{background-color:var(--bot-dot-color)}.user .dot{background-color:var(--user-dot-color)}.dot-flashing{width:2.625rem}.dot-flashing .dot{display:inline-block;width:0.625rem;height:0.625rem;border-radius:10rem;opacity:0.65}.dot-flashing .left{-webkit-animation:dot-flashing 1s infinite alternate;animation:dot-flashing 1s infinite alternate;-webkit-animation-delay:0s;animation-delay:0s}.dot-flashing .middle{margin-left:0.375rem;margin-right:0.375rem;-webkit-animation:dot-flashing 1s infinite linear alternate;animation:dot-flashing 1s infinite linear alternate;-webkit-animation-delay:0.5s;animation-delay:0.5s}.dot-flashing .right{-webkit-animation:dot-flashing 1s infinite alternate;animation:dot-flashing 1s infinite alternate;-webkit-animation-delay:1s;animation-delay:1s}@-webkit-keyframes dot-flashing{0%{opacity:0.65}50%,100%{opacity:0.1}}@keyframes dot-flashing{0%{opacity:0.65}50%,100%{opacity:0.1}}:host{--width:28.75rem;--height:37.5rem;--header-color:var(--amplify-secondary-color);--header-size:var(--amplify-text-lg);--bot-background-color:rgb(230, 230, 230);--bot-text-color:black;--bot-dot-color:var(--bot-text-color);--user-background-color:var(--amplify-blue);--user-text-color:var(--amplify-white);--user-dot-color:var(--user-text-color)}.amplify-chatbot{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-direction:column;flex-direction:column;background-color:var(--background-color);border-radius:0.375rem;-webkit-box-shadow:0.0625rem 0rem 0.25rem 0 rgba(0, 0, 0, 0.15);box-shadow:0.0625rem 0rem 0.25rem 0 rgba(0, 0, 0, 0.15);-webkit-box-sizing:border-box;box-sizing:border-box;font-family:var(--amplify-font-family);margin-bottom:1rem;width:100%;height:var(--height);max-width:var(--width)}@media (min-width: 672px){.amplify-chatbot{width:var(--width)}}.header{padding:1.25rem 0.375rem 1.25rem 0.375rem;color:var(--header-color);font-size:var(--header-size);font-weight:bold;text-align:center;word-wrap:break-word}.body{border-top:0.0625rem solid rgba(0, 0, 0, 0.05);padding:1.5rem 1rem 0 1rem;display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-ms-flex-direction:column;flex-direction:column;overflow:auto}.bubble{max-width:100%;padding:0.8em 1.4em;text-align:left;word-wrap:break-word;margin-bottom:0.625rem}.bot{margin-right:auto;background-color:var(--bot-background-color);color:var(--bot-text-color);border-radius:1.5rem 1.5rem 1.5rem 0}.user{margin-left:auto;background-color:var(--user-background-color);color:var(--user-text-color);border-radius:1.5rem 1.5rem 0 1.5rem}.footer{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;border-top:0.062rem solid rgba(0, 0, 0, 0.05);padding-right:0.625rem;min-height:3.125rem}.footer amplify-input{--border:none;--margin:0;-ms-flex-positive:1;flex-grow:1}canvas{margin-left:0.625rem;margin-right:0.625rem;-ms-flex-positive:1;flex-grow:1;height:3.125rem}.icon-button{--icon-height:1.25rem;--icon-fill:var(--amplify-primary-color);--padding:0.625rem;--width:auto}\";\n// enum for possible bot states\nvar ChatState;\n(function (ChatState) {\n    ChatState[ChatState[\"Initial\"] = 0] = \"Initial\";\n    ChatState[ChatState[\"Listening\"] = 1] = \"Listening\";\n    ChatState[ChatState[\"SendingText\"] = 2] = \"SendingText\";\n    ChatState[ChatState[\"SendingVoice\"] = 3] = \"SendingVoice\";\n    ChatState[ChatState[\"Error\"] = 4] = \"Error\";\n})(ChatState || (ChatState = {}));\n// Message types\nvar MessageFrom;\n(function (MessageFrom) {\n    MessageFrom[\"Bot\"] = \"bot\";\n    MessageFrom[\"User\"] = \"user\";\n})(MessageFrom || (MessageFrom = {}));\n// Error types\nvar ChatErrorType;\n(function (ChatErrorType) {\n    ChatErrorType[ChatErrorType[\"Recoverable\"] = 0] = \"Recoverable\";\n    ChatErrorType[ChatErrorType[\"Unrecoverable\"] = 1] = \"Unrecoverable\";\n})(ChatErrorType || (ChatErrorType = {}));\nvar AmplifyChatbot = /** @class */ (function () {\n    function class_1(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        /** Clear messages when conversation finishes */\n        this.clearOnComplete = false;\n        /** Continue listening to users after they send the message */\n        this.conversationModeOn = false;\n        /** Text placed in the top header */\n        this.botTitle = Translations.CHATBOT_TITLE;\n        /** Whether voice chat is enabled */\n        this.voiceEnabled = false;\n        /** Whether text chat is enabled */\n        this.textEnabled = true;\n        /** Amount of silence (in ms) to wait for */\n        this.silenceTime = 1500;\n        /** Noise threshold between -1 and 1. Anything below is considered a silence. */\n        this.silenceThreshold = 0.2;\n        /** Messages in current session */\n        this.messages = [];\n        /** Text input box value  */\n        this.text = '';\n        /** Current app state */\n        this.chatState = ChatState.Initial;\n        /**\n         * Rendering methods\n         */\n        this.messageJSX = function (messages) {\n            var messageList = messages.map(function (message) { return (h(\"div\", { class: \"bubble \" + message.from }, message.content)); });\n            if (_this.chatState === ChatState.SendingText ||\n                _this.chatState === ChatState.SendingVoice) {\n                // if waiting for voice message, show animation on user side because app is waiting for transcript. Else put it on bot side.\n                var client = _this.chatState === ChatState.SendingText\n                    ? MessageFrom.Bot\n                    : MessageFrom.User;\n                messageList.push(h(\"div\", { class: \"bubble \" + client }, h(\"div\", { class: \"dot-flashing \" + client }, h(\"span\", { class: \"dot left\" }), h(\"span\", { class: \"dot middle\" }), h(\"span\", { class: \"dot right\" }))));\n            }\n            return messageList;\n        };\n        this.chatCompleted = createEvent(this, \"chatCompleted\", 7);\n    }\n    // Occurs when user presses enter in input box\n    class_1.prototype.submitHandler = function (_event) {\n        this.sendTextMessage();\n    };\n    /**\n     * Lifecycle functions\n     */\n    class_1.prototype.componentWillLoad = function () {\n        if (!Interactions || typeof Interactions.onComplete !== 'function') {\n            throw new Error(NO_INTERACTIONS_MODULE_FOUND);\n        }\n        this.validateProps();\n    };\n    class_1.prototype.componentDidRender = function () {\n        // scroll to the bottom if necessary\n        var body = this.element.shadowRoot.querySelector('.body');\n        body.scrollTop = body.scrollHeight;\n    };\n    class_1.prototype.validateProps = function () {\n        var _this = this;\n        if (!this.voiceEnabled && !this.textEnabled) {\n            this.setError(Translations.CHAT_DISABLED_ERROR, ChatErrorType.Unrecoverable);\n            return;\n        }\n        else if (!this.botName) {\n            this.setError(Translations.NO_BOT_NAME_ERROR, ChatErrorType.Unrecoverable);\n            return;\n        }\n        if (this.welcomeMessage)\n            this.appendToChat(this.welcomeMessage, MessageFrom.Bot);\n        // Initialize AudioRecorder if voice is enabled\n        if (this.voiceEnabled) {\n            this.audioRecorder = new AudioRecorder({\n                time: this.silenceTime,\n                amplitude: this.silenceThreshold,\n            });\n            this.audioRecorder.init().catch(function (err) {\n                _this.setError(err, ChatErrorType.Recoverable);\n            });\n        }\n        // Callback function to be called after chat is completed\n        var onComplete = function (err, data) {\n            _this.chatCompleted.emit({\n                data: data,\n                err: err,\n            });\n            if (_this.clearOnComplete) {\n                _this.reset();\n            }\n            else {\n                _this.chatState = ChatState.Initial;\n            }\n        };\n        try {\n            Interactions.onComplete(this.botName, onComplete);\n        }\n        catch (err) {\n            this.setError(err, ChatErrorType.Unrecoverable);\n        }\n    };\n    /**\n     * Handlers\n     */\n    class_1.prototype.handleSubmit = function (event) {\n        event.preventDefault();\n        this.sendTextMessage();\n    };\n    class_1.prototype.handleMicButton = function () {\n        var _this = this;\n        if (this.chatState !== ChatState.Initial)\n            return;\n        this.audioRecorder.stop();\n        this.chatState = ChatState.Listening;\n        this.audioRecorder.startRecording(function () { return _this.handleSilence(); }, function (data, length) { return _this.visualizer(data, length); });\n    };\n    class_1.prototype.handleSilence = function () {\n        var _this = this;\n        this.chatState = ChatState.SendingVoice;\n        this.audioRecorder.stopRecording();\n        this.audioRecorder.exportWAV().then(function (blob) {\n            _this.sendVoiceMessage(blob);\n        });\n    };\n    class_1.prototype.handleTextChange = function (event) {\n        var target = event.target;\n        this.text = target.value;\n    };\n    class_1.prototype.handleCancelButton = function () {\n        this.audioRecorder.clear();\n        this.chatState = ChatState.Initial;\n    };\n    class_1.prototype.handleToastClose = function (errorType) {\n        this.error = undefined; // clear error\n        // if error is recoverable, reset the app state to initial\n        if (errorType === ChatErrorType.Recoverable) {\n            this.chatState = ChatState.Initial;\n        }\n    };\n    /**\n     * Visualization\n     */\n    class_1.prototype.visualizer = function (dataArray, bufferLength) {\n        var canvas = this.element.shadowRoot.querySelector('canvas');\n        visualize(dataArray, bufferLength, canvas);\n    };\n    /**\n     * Interactions helpers\n     */\n    class_1.prototype.sendTextMessage = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var text, response, err_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.text.length === 0 || this.chatState !== ChatState.Initial)\n                            return [2 /*return*/];\n                        text = this.text;\n                        this.text = '';\n                        this.appendToChat(text, MessageFrom.User);\n                        this.chatState = ChatState.SendingText;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Interactions.send(this.botName, text)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_3 = _a.sent();\n                        this.setError(err_3, ChatErrorType.Recoverable);\n                        return [2 /*return*/];\n                    case 4:\n                        if (response.message) {\n                            this.appendToChat(response.message, MessageFrom.Bot);\n                        }\n                        this.chatState = ChatState.Initial;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.sendVoiceMessage = function (audioInput) {\n        return __awaiter(this, void 0, void 0, function () {\n            var interactionsMessage, response, err_4, dialogState;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        interactionsMessage = {\n                            content: audioInput,\n                            options: {\n                                messageType: 'voice',\n                            },\n                        };\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Interactions.send(this.botName, interactionsMessage)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_4 = _a.sent();\n                        this.setError(err_4, ChatErrorType.Recoverable);\n                        return [2 /*return*/];\n                    case 4:\n                        this.chatState = ChatState.Initial;\n                        dialogState = response.dialogState;\n                        if (response.inputTranscript)\n                            this.appendToChat(response.inputTranscript, MessageFrom.User);\n                        this.appendToChat(response.message, MessageFrom.Bot);\n                        return [4 /*yield*/, this.audioRecorder\n                                .play(response.audioStream)\n                                .then(function () {\n                                // if conversationMode is on, chat is incomplete, and mic button isn't pressed yet, resume listening.\n                                if (_this.conversationModeOn &&\n                                    dialogState !== 'Fulfilled' &&\n                                    dialogState !== 'Failed' &&\n                                    _this.chatState === ChatState.Initial) {\n                                    _this.handleMicButton();\n                                }\n                            })\n                                .catch(function (err) { return _this.setError(err, ChatErrorType.Recoverable); })];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.appendToChat = function (content, from) {\n        this.messages = __spreadArrays(this.messages, [\n            {\n                content: content,\n                from: from,\n            },\n        ]);\n    };\n    /**\n     * State control methods\n     */\n    class_1.prototype.setError = function (error, errorType) {\n        var message = typeof error === 'string' ? error : error.message;\n        this.chatState = ChatState.Error;\n        this.error = { message: message, errorType: errorType };\n    };\n    class_1.prototype.reset = function () {\n        this.chatState = ChatState.Initial;\n        this.text = '';\n        this.error = undefined;\n        this.messages = [];\n        if (this.welcomeMessage)\n            this.appendToChat(this.welcomeMessage, MessageFrom.Bot);\n        this.audioRecorder && this.audioRecorder.clear();\n    };\n    class_1.prototype.listeningFooterJSX = function () {\n        var _this = this;\n        var visualization = h(\"canvas\", { height: \"50\" });\n        var cancelButton = (h(\"amplify-button\", { \"data-test\": \"chatbot-cancel-button\", handleButtonClick: function () { return _this.handleCancelButton(); }, class: \"icon-button\", variant: \"icon\", icon: \"ban\" }));\n        return [visualization, cancelButton];\n    };\n    class_1.prototype.footerJSX = function () {\n        var _this = this;\n        if (this.chatState === ChatState.Listening)\n            return this.listeningFooterJSX();\n        var inputPlaceholder = this.textEnabled\n            ? Translations.TEXT_INPUT_PLACEHOLDER\n            : Translations.VOICE_INPUT_PLACEHOLDER;\n        var textInput = (h(\"amplify-input\", { placeholder: I18n.get(inputPlaceholder), description: \"text\", handleInputChange: function (evt) { return _this.handleTextChange(evt); }, value: this.text, disabled: this.chatState === ChatState.Error || !this.textEnabled }));\n        var micButton = this.voiceEnabled && (h(\"amplify-button\", { \"data-test\": \"chatbot-mic-button\", handleButtonClick: function () { return _this.handleMicButton(); }, class: \"icon-button\", variant: \"icon\", icon: \"microphone\", disabled: this.chatState === ChatState.Error ||\n                this.chatState !== ChatState.Initial }));\n        var sendButton = this.textEnabled && (h(\"amplify-button\", { \"data-test\": \"chatbot-send-button\", class: \"icon-button\", variant: \"icon\", icon: \"send\", handleButtonClick: function () { return _this.sendTextMessage(); }, disabled: this.chatState === ChatState.Error ||\n                this.chatState !== ChatState.Initial }));\n        return [textInput, micButton, sendButton];\n    };\n    class_1.prototype.errorToast = function () {\n        var _this = this;\n        if (!this.error)\n            return;\n        var _a = this.error, message = _a.message, errorType = _a.errorType;\n        return (h(\"amplify-toast\", { message: I18n.get(message), handleClose: function () { return _this.handleToastClose(errorType); } }));\n    };\n    class_1.prototype.render = function () {\n        var _this = this;\n        return (h(Host, null, h(\"div\", { class: \"amplify-chatbot\" }, h(\"slot\", { name: \"header\" }, h(\"div\", { class: \"header\", \"data-test\": \"chatbot-header\" }, I18n.get(this.botTitle))), h(\"div\", { class: \"body\", \"data-test\": \"chatbot-body\" }, this.messageJSX(this.messages)), h(\"form\", { onSubmit: function (e) { return _this.handleSubmit(e); } }, h(\"div\", { class: \"footer\", \"data-test\": \"chatbot-footer\" }, this.footerJSX())), this.errorToast())));\n    };\n    Object.defineProperty(class_1.prototype, \"element\", {\n        get: function () { return getElement(this); },\n        enumerable: false,\n        configurable: true\n    });\n    return class_1;\n}());\nAmplifyChatbot.style = amplifyChatbotCss;\nexport { AmplifyChatbot as amplify_chatbot };\n"],"names":["logger","Logger","options","this","_config","AbstractInteractionsProvider","config","__assign","debug","getProviderName","Object","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","assign","t","s","i","n","arguments","length","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","pop","push","__read","o","m","r","ar","error","ActiveContextTimeToLive","ActiveContext","BadRequestException","ConflictException","DeleteSessionRequest","DeleteSessionResponse","InternalFailureException","LimitExceededException","NotFoundException","GetSessionRequest","FulfillmentState","MessageFormatType","DialogActionType","DialogAction","ConfirmationStatus","IntentSummary","GetSessionResponse","BadGatewayException","DependencyFailedException","LoopDetectedException","NotAcceptableException","PostContentRequest","DialogState","PostContentResponse","RequestTimeoutException","UnsupportedMediaTypeException","PostTextRequest","IntentConfidence","PredictedIntent","ContentType","Button","GenericAttachment","ResponseCard","SentimentResponse","PostTextResponse","PutSessionRequest","PutSessionResponse","AWS_TEMPLATE","AWS_REGIONS","Set","AWS_CN_REGIONS","AWS_ISO_REGIONS","AWS_ISO_B_REGIONS","AWS_US_GOV_REGIONS","ClientSharedValues","apiVersion","disableHostPrefix","regionInfoProvider","region","regionInfo","undefined","hostname","partition","signingService","has","replace","serviceId","urlParser","parseUrl","ClientDefaultValues","runtime","base64Decoder","fromBase64","base64Encoder","toBase64","bodyLengthChecker","calculateBodyLength","credentialDefaultProvider","Error","defaultUserAgentProvider","defaultUserAgent","clientVersion","maxAttempts","DEFAULT_MAX_ATTEMPTS","invalidProvider","requestHandler","FetchHttpHandler","sha256","Sha256","streamCollector","utf8Decoder","fromUtf8","utf8Encoder","toUtf8","configuration","_config_0","__ClientDefaultValues","_config_1","resolveRegionConfig","_config_2","resolveEndpointsConfig","_config_3","resolveAwsAuthConfig","_config_4","resolveRetryConfig","_config_5","resolveHostHeaderConfig","_config_6","resolveUserAgentConfig","_this","middlewareStack","use","getAwsAuthPlugin","getRetryPlugin","getContentLengthPlugin","getHostHeaderPlugin","getLoggerPlugin","getUserAgentPlugin","LexRuntimeServiceClient","_super","destroy","__Client","obj","parameters","SENSITIVE_STRING","slots","message","recentIntentSummaryView","map","item","filterSensitiveLog","sessionAttributes","dialogAction","activeContexts","requestAttributes","inputText","alternativeIntents","deserializeAws_restJson1PostContentCommandError","output","context","parseBody","parsedOutput","_p","_q","errorCode","loadRestJsonErrorCode","_b","deserializeAws_restJson1BadGatewayExceptionResponse","response","name","$metadata","deserializeMetadata","deserializeAws_restJson1BadRequestExceptionResponse","deserializeAws_restJson1ConflictExceptionResponse","deserializeAws_restJson1DependencyFailedExceptionResponse","deserializeAws_restJson1InternalFailureExceptionResponse","deserializeAws_restJson1LimitExceededExceptionResponse","deserializeAws_restJson1LoopDetectedExceptionResponse","deserializeAws_restJson1NotAcceptableExceptionResponse","deserializeAws_restJson1NotFoundExceptionResponse","deserializeAws_restJson1RequestTimeoutExceptionResponse","deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse","parsedBody","code","Code","Message","$fault","deserializeAws_restJson1PostTextCommandError","_l","_m","contents","data","retryAfterSeconds","headers","serializeAws_restJson1ActiveContextParametersMap","input","entries","reduce","acc","_a","_c","key","serializeAws_restJson1ActiveContextsList","filter","entry","timeToLive","serializeAws_restJson1ActiveContextTimeToLive","serializeAws_restJson1ActiveContext","timeToLiveInSeconds","turnsToLive","serializeAws_restJson1StringMap","deserializeAws_restJson1ActiveContextParametersMap","deserializeAws_restJson1ActiveContextsList","deserializeAws_restJson1ActiveContextTimeToLive","deserializeAws_restJson1ActiveContext","deserializeAws_restJson1genericAttachmentList","attachmentLinkUrl","buttons","deserializeAws_restJson1listOfButtons","imageUrl","subTitle","title","deserializeAws_restJson1GenericAttachment","deserializeAws_restJson1IntentConfidence","score","deserializeAws_restJson1IntentList","deserializeAws_restJson1PredictedIntent","text","deserializeAws_restJson1Button","intentName","nluIntentConfidence","deserializeAws_restJson1StringMap","deserializeAws_restJson1ResponseCard","contentType","genericAttachments","version","deserializeAws_restJson1SentimentResponse","sentimentLabel","sentimentScore","httpStatusCode","statusCode","requestId","extendedRequestId","cfId","collectBodyString","streamBody","Uint8Array","collectBody","isSerializableHeaderValue","getOwnPropertyNames","includes","size","encoded","JSON","parse","object","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey","keys","find","k","toLowerCase","PostTextCommand","clientStack","getSerdePlugin","serialize","deserialize","stack","concat","handlerExecutionContext","clientName","commandName","inputFilterSensitiveLog","outputFilterSensitiveLog","request","handle","resolvedPath","botName","labelValue","__extendedEncodeURIComponent","botAlias","userId","stringify","endpoint","protocol","port","__HttpRequest","method","path","serializeAws_restJson1PostTextCommand","botVersion","dialogState","messageFormat","responseCard","sentimentResponse","sessionId","slotToElicit","deserializeAws_restJson1PostTextCommand","$Command","PostContentCommand","Buffer","from","__LazyJsonString","toString","accept","inputStream","serializeAws_restJson1PostContentCommand","audioStream","inputTranscript","deserializeAws_restJson1PostContentCommand","convert","stream","Blob","ReadableStream","Response","arrayBuffer","buffer","_botsCompleteCallback","AWSLexProvider","botname","setTimeout","onComplete","Credentials","credentials","lexRuntimeServiceClient","customUserAgent","getAmplifyUserAgent","params","alias","identityId","postTextCommand","send","reportBotStatus","err_1","content","messageType","postContentCommand","audioArray","err_2","callback","ErrorEvent","Interactions","_options","_pluggables","InteractionsClass","opt","bots","aws_bots_config","bots_config","isArray","forEach","bot","providerName","configure","pluggable","getCategory","botProvider","sendMessage","Amplify","ChatState","MessageFrom","ChatErrorType","__spreadArrays","il","a","j","jl","writeString","view","offset","string","setUint8","charCodeAt","encodeWAV","samples","exportSampleRate","audioSize","dataSize","ArrayBuffer","DataView","setUint32","fmtSize","setUint16","byteOffset","Math","max","min","setInt16","floatTo16BitPCM","exportBuffer","recBuffer","recLength","recordSampleRate","mergedBuffers","bufferArray","Float32Array","set","mergeBuffers","downsampledBuffer","sampleRateRatio","newLength","round","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","downsampleBuffer","encodedWav","type","AudioRecorder","streamBuffer","streamBufferLength","recording","init","browserOrNode","isBrowser","window","AudioContext","webkitAudioContext","audioContext","navigator","mediaDevices","getUserMedia","audio","audioSupported","setupAudioNodes","catch","sourceNode","processorNode","analyserNode","resume","createMediaStreamSource","createScriptProcessor","onaudioprocess","audioProcessingEvent","inputBuffer","getChannelData","analyse","createAnalyser","minDecibels","maxDecibels","smoothingTimeConstant","connect","destination","startRecording","onSilence","visualizer","start","Date","now","stopRecording","clear","play","myBlob","res","rej","fileReader","FileReader","onload","playbackSource","disconnect","createBufferSource","decodeAudioData","buf","onended","err","onerror","readAsArrayBuffer","stop","analyser","fftSize","bufferLength","dataArray","amplitude","time","getByteTimeDomainData","curr_value_time","exportWAV","blob","sampleRate","AmplifyChatbot","class_1","hostRef","registerInstance","clearOnComplete","conversationModeOn","botTitle","Translations","voiceEnabled","textEnabled","silenceTime","silenceThreshold","messages","chatState","Initial","messageJSX","messageList","h","class","SendingText","SendingVoice","client","Bot","User","chatCompleted","createEvent","submitHandler","_event","sendTextMessage","componentWillLoad","NO_INTERACTIONS_MODULE_FOUND","validateProps","componentDidRender","element","shadowRoot","querySelector","scrollTop","scrollHeight","welcomeMessage","appendToChat","audioRecorder","setError","Recoverable","emit","reset","Unrecoverable","handleSubmit","event","preventDefault","handleMicButton","Listening","handleSilence","sendVoiceMessage","handleTextChange","target","handleCancelButton","handleToastClose","errorType","canvas","getBoundingClientRect","width","height","canvasCtx","getContext","fillStyle","clearRect","requestAnimationFrame","fillRect","lineWidth","color","getComputedStyle","document","documentElement","getPropertyValue","strokeStyle","beginPath","sliceWidth","x","moveTo","lineTo","stroke","visualize","err_3","audioInput","interactionsMessage","err_4","listeningFooterJSX","handleButtonClick","variant","icon","footerJSX","inputPlaceholder","placeholder","I18n","description","handleInputChange","evt","disabled","errorToast","handleClose","render","Host","onSubmit","defineProperty","get","getElement","enumerable","configurable","style"],"sourceRoot":""}